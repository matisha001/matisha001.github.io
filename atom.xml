<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>matisha001&#39;s notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://matisha001.github.io/"/>
  <updated>2017-10-06T17:55:31.687Z</updated>
  <id>https://matisha001.github.io/</id>
  
  <author>
    <name>仰天長嘯歸去來，金戈鐵馬功壹場！</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue基础</title>
    <link href="https://matisha001.github.io/2016/08/19/vue/"/>
    <id>https://matisha001.github.io/2016/08/19/vue/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2017-10-06T17:55:31.687Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://matisha001.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>react实战</title>
    <link href="https://matisha001.github.io/2016/02/10/react%E5%AE%9E%E6%88%98/"/>
    <id>https://matisha001.github.io/2016/02/10/react实战/</id>
    <published>2016-02-09T16:00:00.000Z</published>
    <updated>2017-10-06T20:41:50.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><blockquote><p>npm  i -g gulp </p><p>npm  i react  –save </p><p>npm  i –save-dev gulp gulp-browserify  gulp-concat gulp-react  lodash  reactify</p><p>bower init </p><p>bower install bootstrap –save</p></blockquote><h3 id="配置gulpfile-js"><a href="#配置gulpfile-js" class="headerlink" title="配置gulpfile.js"></a>配置gulpfile.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),<span class="comment">//运行任务</span></div><div class="line">connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>),<span class="comment">//运行connect服务器</span></div><div class="line">browserify = <span class="built_in">require</span>(<span class="string">'gulp-browserify'</span>),<span class="comment">//将组件拼接在一起,使浏览器代码也可以使用require来构建</span></div><div class="line">concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),<span class="comment">//将所有文件拼在一起</span></div><div class="line">port = process.env.port || <span class="number">5000</span>;</div><div class="line">gulp.task(<span class="string">'browserify'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.src(<span class="string">'./app/js/main.js'</span>)</div><div class="line">.pipe(browserify(&#123;</div><div class="line">transform: <span class="string">'reactify'</span>,</div><div class="line">&#125;))</div><div class="line">.pipe(gulp.dest(<span class="string">'./dist/js'</span>))</div><div class="line">&#125;);</div><div class="line"><span class="comment">// live reload </span></div><div class="line">gulp.task(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">connect.server(&#123;</div><div class="line"><span class="comment">// root:'./',</span></div><div class="line">port: port,</div><div class="line">livereload: <span class="literal">true</span>,</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 刷新js </span></div><div class="line">gulp.task(<span class="string">'js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.src(<span class="string">'./dist/**/*.js'</span>)</div><div class="line">.pipe( connect.reload() )</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 刷新html </span></div><div class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.src(<span class="string">'./app/**/*.html'</span>)</div><div class="line">.pipe( connect.reload() )</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.watch(<span class="string">'./dist/**/*.js'</span>,[<span class="string">'js'</span>]);</div><div class="line">gulp.watch(<span class="string">'./app/**/*.html'</span>,[<span class="string">'html'</span>]);</div><div class="line">gulp.watch(<span class="string">'./app/js/**/*.js'</span>,[<span class="string">'browserify'</span>]);</div><div class="line">&#125;)</div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'browserify'</span>]);</div><div class="line">gulp.task(<span class="string">'serve'</span>,[<span class="string">'browserify'</span>,<span class="string">'connect'</span>,<span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="react" scheme="https://matisha001.github.io/tags/react/"/>
    
      <category term="gulp" scheme="https://matisha001.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>react基础</title>
    <link href="https://matisha001.github.io/2016/01/19/react/"/>
    <id>https://matisha001.github.io/2016/01/19/react/</id>
    <published>2016-01-18T16:00:00.000Z</published>
    <updated>2017-10-06T20:07:24.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React语法"><a href="#React语法" class="headerlink" title="React语法"></a>React语法</h2><h3 id="React-render"><a href="#React-render" class="headerlink" title="React.render"></a>React.render</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = React.render( </div><div class="line">  &lt;Component/&gt;, </div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>),</div><div class="line">  callback</div><div class="line">)</div><div class="line"><span class="built_in">console</span>.log(test)</div></pre></td></tr></table></figure><blockquote><p>React.render返回的是一个在当前作用域上的一个对象 </p></blockquote><h3 id="React-createClass"><a href="#React-createClass" class="headerlink" title="React.createClass"></a>React.createClass</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//state初始状态</span></div><div class="line">  &#125;,</div><div class="line">  propTypes:&#123;</div><div class="line">    <span class="comment">//验证props格式是否正确</span></div><div class="line">  &#125;,</div><div class="line">  getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//props初始参数</span></div><div class="line">  &#125;,</div><div class="line">  componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//组件将要被装载</span></div><div class="line">  &#125;,</div><div class="line">  componentDidMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//组件已经被装载</span></div><div class="line">  &#125;,</div><div class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//组件将要被卸载</span></div><div class="line">    React.unmountComponentAtNode(  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) );<span class="comment">//删除react节点</span></div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;test&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure> <a id="more"></a><h2 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h2><blockquote><p>react生命周期分三个阶段装载、更新、卸载 </p></blockquote><h3 id="装载"><a href="#装载" class="headerlink" title="装载"></a>装载</h3><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h4><blockquote><p>react后期版本</p></blockquote><h4 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps()"></a>getDefaultProps()</h4><blockquote><p>props初始参数</p></blockquote><h4 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState()"></a>getInitialState()</h4><blockquote><p>state初始状态</p></blockquote><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><blockquote><p>组件将要被装载  改变state时，不会二次渲染</p></blockquote><h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><blockquote><p>  组件已经被装载<br>  改变state时，会二次渲染<br>  可以通过this.getDOMNode()获取dom<br>  进行ajax操作,获取值改变state</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.getDOMNode() );</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><blockquote><p>第一次加载组件的时候不会执行更新阶段。</p></blockquote><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps()"></a>componentWillReceiveProps()</h4><blockquote><p>子组件将要获取props,根据props来判断state是否需要更新,确保只渲染一次</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps:<span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><blockquote><p>是否允许更新</p><p>可以设置更新的限制</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">shouldComponentUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">nextProp,nextState</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><blockquote><p>组件将要被更新  shouldComponentUpdate返回为true时，不可以取消更新</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentWillUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">nextProp,nextState</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="render-1"><a href="#render-1" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><blockquote><p>组件已经被更新</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><blockquote><p>组件将要被卸载  </p><p>用于一些组件取消事件监听或者清除定时器</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    self.setState(&#123;</div><div class="line">      count: self.state.count + <span class="number">1</span>,</div><div class="line">    &#125;)</div><div class="line">  &#125;,<span class="number">1000</span>);</div><div class="line">&#125;,</div><div class="line">componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'you are tring to kill me !! '</span>)</div><div class="line">  clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">&#125;,</div><div class="line">killMySelf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  React.unmountComponentAtNode(  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) );</div><div class="line">&#125;,</div><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> ( </div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;h1 &gt; 计数： &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt; </span></div><div class="line"><span class="regexp">      &lt;button onClick=&#123;this.killMySelf&#125;&gt;卸载掉这个组件&lt;/</span>button&gt;</div><div class="line">      &lt;Submessage/&gt;</div><div class="line">    &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  )</span></div><div class="line"><span class="regexp">&#125;,</span></div></pre></td></tr></table></figure><h2 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h2><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><blockquote><p>react组件的嵌套必须在外面用一个标签包裹起来</p><p>父组件在传递一个数组的时候,子组件必须要有一个key</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Components = React.createClass(&#123;</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> subComponents = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">      subComponents.push(</div><div class="line">        &lt;Component key=&#123;<span class="string">'subMsg'</span>+i&#125;/&gt;</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ( </div><div class="line">      &lt;div&gt;</div><div class="line">      &lt;h1&gt;你好世界！！！&lt;<span class="regexp">/h1&gt; </span></div><div class="line"><span class="regexp">      &#123;subComponents&#125;</span></div><div class="line"><span class="regexp">      &lt;/</span>div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="组件状态state"><a href="#组件状态state" class="headerlink" title="组件状态state"></a>组件状态state</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//获取初始状态</span></div><div class="line">  &#125;,</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      Count: <span class="number">1</span>,</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</div><div class="line">      test</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><blockquote><p>不要使用this.state来改变state的状态，要用this.setState({})来改变state的状态.调用setState,react将重新render一下。</p><p>如果非要使用this.state来改变state的状态，需要调用forceUpdate()</p></blockquote><h3 id="组件通信props"><a href="#组件通信props" class="headerlink" title="组件通信props"></a>组件通信props</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Submessage &#123;...this.props &#125;  messages=&#123;<span class="keyword">this</span>.state.subMessages&#125; /&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Submessage = React.createClass(&#123;</div><div class="line">  propTypes:&#123;</div><div class="line">    <span class="comment">//验证props格式是否正确</span></div><div class="line">    messages: React.PropTypes.array.isRequired,</div><div class="line">  &#125;,</div><div class="line">  getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//props初始参数</span></div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> msgs = [];</div><div class="line">    <span class="keyword">this</span>.props.messages.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">msg,index</span>)</span>&#123;</div><div class="line">      msgs.push(</div><div class="line">        &lt;p&gt;&#123;msg&#125;&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">      )</span></div><div class="line"><span class="regexp">    &#125;);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">    return (</span></div><div class="line"><span class="regexp">      &lt;div&gt;&#123;msgs&#125;&lt;/</span>div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><blockquote><p>PropTypes种类有 bool、array、func、number、object、string等</p></blockquote><h3 id="组件指向ref"><a href="#组件指向ref" class="headerlink" title="组件指向ref"></a>组件指向ref</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="comment">//获取原生dom对象</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.mytest.getDOMNode());</div><div class="line">    <span class="built_in">console</span>.log(React.findDOMNode(<span class="keyword">this</span>.refs.mytest));</div><div class="line">    <span class="keyword">this</span>.refs.mytest.saySomething();</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Submessage ref=<span class="string">"mytest"</span> messages=&#123;<span class="keyword">this</span>.state.subMessages&#125; /&gt;</div><div class="line">        &lt;input ref=&#123;</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">comp</span>)</span>&#123;</div><div class="line">              React.findDOMNode(comp).focus()</div><div class="line">            &#125;</div><div class="line"></div><div class="line">          &#125;</div><div class="line">          /&gt;test</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Submessage = React.createClass(&#123;</div><div class="line">  saySomething：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"111"</span>)</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div onChange=&#123;<span class="keyword">this</span>.props.handleClick&#125;&gt;&#123;msgs&#125;&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><blockquote><p>ref指的是react对象,在子组件中定义其他方法,ref也可以实现调用。</p><p>ref是字符串,实际上也可以是函数</p></blockquote><h2 id="React事件"><a href="#React事件" class="headerlink" title="React事件"></a>React事件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      Count: <span class="number">1</span>,</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(e.nativeEvent);<span class="comment">//浏览器自带的event</span></div><div class="line">    <span class="built_in">console</span>.log(e.target);<span class="comment">//封装的event</span></div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</div><div class="line">        test</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><h2 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h2><blockquote><p>mixins和组件的生命周期是密切相关的,定义mixins目的就是让组件共用一些逻辑。</p></blockquote><h3 id="React双向数据流"><a href="#React双向数据流" class="headerlink" title="React双向数据流"></a>React双向数据流</h3><blockquote><p>react 采用的是单向数据流。</p><p>react-with-addons.js</p><p>实现react双向数据流,需要mixins</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var Component = React.createClass(&#123;</div><div class="line">  mixins: [ React.addons.LinkedStateMixin ],</div><div class="line">  render:function()&#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1&gt;&#123;this.state.message&#125;&lt;/h1&gt;</div><div class="line">        &lt;input type=&quot;text&quot; valueLink=&#123;this.linkState(&apos;message&apos;)&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="mixins开发"><a href="#mixins开发" class="headerlink" title="mixins开发"></a>mixins开发</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stateRecordMixin = &#123;</div><div class="line">  componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.oldStates = [];</div><div class="line">  &#125;,</div><div class="line">  componentWillUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProp,nextState</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.oldStates.push(nextState);</div><div class="line">  &#125;,</div><div class="line">  previousState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.oldStates.length <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> index == <span class="number">-1</span> ? &#123;&#125; : <span class="keyword">this</span>.oldStates[index];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> MessageBox = React.createClass(&#123;</div><div class="line">  mixins: [stateRecordMixin],</div><div class="line">  getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      count: <span class="number">0</span>,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  doUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      count: <span class="keyword">this</span>.state.count + <span class="number">1</span>,</div><div class="line">    &#125;);</div><div class="line">    alert(<span class="keyword">this</span>.previousState().count)</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> ( </div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1 &gt; 计数： &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt; </span></div><div class="line"><span class="regexp">        &lt;button onClick=&#123;this.doUpdate&#125;&gt;手动更新一下组件&lt;/</span>button&gt;</div><div class="line">        &lt;Submessage count=&#123;<span class="keyword">this</span>.state.count&#125;/&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div><div class="line"><span class="regexp">var Submessage = React.createClass(&#123;</span></div><div class="line"><span class="regexp">  mixins: [stateRecordMixin],</span></div><div class="line"><span class="regexp">  getInitialState:function()&#123;</span></div><div class="line"><span class="regexp">    return &#123;</span></div><div class="line"><span class="regexp">      count: 0,</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">  &#125;,</span></div><div class="line"><span class="regexp">  componentWillReceiveProps:function(nextProp)&#123;</span></div><div class="line"><span class="regexp">    this.setState(&#123;</span></div><div class="line"><span class="regexp">      count: this.props.count *2,</span></div><div class="line"><span class="regexp">    &#125;)</span></div><div class="line"><span class="regexp">  &#125;,</span></div><div class="line"><span class="regexp">  render:function()&#123;</span></div><div class="line"><span class="regexp">    console.log(this.previousState().count )</span></div><div class="line"><span class="regexp">    return (</span></div><div class="line"><span class="regexp">      &lt;h3&gt;当前子组件的计数是：&#123;this.state.count&#125;&lt;/</span>h3&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React语法&quot;&gt;&lt;a href=&quot;#React语法&quot; class=&quot;headerlink&quot; title=&quot;React语法&quot;&gt;&lt;/a&gt;React语法&lt;/h2&gt;&lt;h3 id=&quot;React-render&quot;&gt;&lt;a href=&quot;#React-render&quot; class=&quot;headerlink&quot; title=&quot;React.render&quot;&gt;&lt;/a&gt;React.render&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = React.render( &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Component/&amp;gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  callback&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(test)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;React.render返回的是一个在当前作用域上的一个对象 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;React-createClass&quot;&gt;&lt;a href=&quot;#React-createClass&quot; class=&quot;headerlink&quot; title=&quot;React.createClass&quot;&gt;&lt;/a&gt;React.createClass&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Component = React.createClass(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getInitialState:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//state初始状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  propTypes:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//验证props格式是否正确&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getDefaultProps:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//props初始参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentWillMount:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//组件将要被装载&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentDidMount:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//组件已经被装载&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  componentWillUnmount: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//组件将要被卸载&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    React.unmountComponentAtNode(  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;) );&lt;span class=&quot;comment&quot;&gt;//删除react节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  render:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;test&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    )&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="react" scheme="https://matisha001.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack的使用</title>
    <link href="https://matisha001.github.io/2015/03/19/webpack/"/>
    <id>https://matisha001.github.io/2015/03/19/webpack/</id>
    <published>2015-03-18T16:00:00.000Z</published>
    <updated>2017-10-06T17:56:13.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i webpack --g</div><div class="line">webpack --help</div></pre></td></tr></table></figure><h2 id="使用webpack创建项目"><a href="#使用webpack创建项目" class="headerlink" title="使用webpack创建项目"></a>使用webpack创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init </div><div class="line">npm i webpack</div><div class="line">webpack enter.js  bundle.js</div></pre></td></tr></table></figure><p> 打包生成的bundle.js包含webpack本身需要的一些东西。</p> <a id="more"></a><h3 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">var</span> test=<span class="built_in">require</span>(<span class="string">'./test'</span>);</div><div class="line"><span class="built_in">console</span>.log(test)</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="built_in">module</span>.exports=<span class="string">"matisha001"</span></div></pre></td></tr></table></figure><h3 id="loader转换器"><a href="#loader转换器" class="headerlink" title="loader转换器"></a>loader转换器</h3><p> loader转换器是将资源从一种形式转化为另一种形式，最总转化为js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常见的转换器</span></div><div class="line">css-loader、style-loader等</div><div class="line"><span class="built_in">require</span>(<span class="string">'style!css!./style.css'</span>);</div></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>默认的配置文件为webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">输入 webpack</div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry:<span class="string">'./main.js'</span>,<span class="comment">//入口文件</span></div><div class="line">  output:&#123;<span class="comment">//生成文件</span></div><div class="line">    path:__dirname,</div><div class="line">    filename:<span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  devtool:<span class="string">'source-map'</span>,<span class="comment">//生成source-map文件</span></div><div class="line">  <span class="built_in">module</span>:&#123; <span class="comment">//要使用的模块</span></div><div class="line">    loaders:[</div><div class="line">      &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">loader</span>:<span class="string">'babel'</span>&#125;,</div><div class="line">      &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">loader</span>:<span class="string">'style!css'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="调试代码-source-map"><a href="#调试代码-source-map" class="headerlink" title="调试代码 source-map"></a>调试代码 source-map</h3><p>生成source-map文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --devtool source-map</div></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="keyword">debugger</span>;  <span class="comment">//代码打断点</span></div><div class="line"><span class="built_in">module</span>.exports=<span class="string">"matisha001"</span></div></pre></td></tr></table></figure><h3 id="babel转换"><a href="#babel转换" class="headerlink" title="babel转换"></a>babel转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装babel依赖</span></div><div class="line">npm i babel-loader  babel-core babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//创建.babelrc配置文件</div><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>:[<span class="string">"es2015"</span>] //设置babel预设</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'./name'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> name;</div></pre></td></tr></table></figure><h2 id="webpack插件"><a href="#webpack插件" class="headerlink" title="webpack插件"></a>webpack插件</h2><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>提供开发服务器、页面刷新、模块热替换(只替换有变化的内容，不需要刷新整个页面)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm i webpack-dev-server --g</div><div class="line">npm i webpack-dev-server --save-dev</div><div class="line">webpack-dev-server --inline --hot</div></pre></td></tr></table></figure><h2 id="创建react项目"><a href="#创建react项目" class="headerlink" title="创建react项目"></a>创建react项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装依赖</span></div><div class="line">npm i babel-core babel-preset-es2015 babel-preset-react webpack webpack-dev-server babel-loader react-hot-loader --save-dev</div><div class="line">npm i react react-dom --save</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry:<span class="string">'./main.js'</span>,<span class="comment">//入口文件</span></div><div class="line">  output:&#123;<span class="comment">//生成文件</span></div><div class="line">    path:__dirname,</div><div class="line">    filename:<span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  devtool:<span class="string">'source-map'</span>,<span class="comment">//生成source-map文件</span></div><div class="line">  <span class="built_in">module</span>:&#123; <span class="comment">//要使用的模块</span></div><div class="line">    loaders:[</div><div class="line">      &#123;</div><div class="line">        test:[<span class="regexp">/\.js$/</span>,/\.jsx?$/],</div><div class="line">        exclude:<span class="regexp">/(node_modules)/</span>,</div><div class="line">        loader:<span class="string">'react-hot!babel'</span></div><div class="line"></div><div class="line">      &#125;,</div><div class="line">      &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">loader</span>:<span class="string">'style!css'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//创建.babelrc配置文件</div><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>:[<span class="string">"es2015"</span>,<span class="string">"react"</span>] //设置babel预设</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装webpack&quot;&gt;&lt;a href=&quot;#安装webpack&quot; class=&quot;headerlink&quot; title=&quot;安装webpack&quot;&gt;&lt;/a&gt;安装webpack&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i webpack --g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack --help&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用webpack创建项目&quot;&gt;&lt;a href=&quot;#使用webpack创建项目&quot; class=&quot;headerlink&quot; title=&quot;使用webpack创建项目&quot;&gt;&lt;/a&gt;使用webpack创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm init &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm i webpack&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack enter.js  bundle.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 打包生成的bundle.js包含webpack本身需要的一些东西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
  </entry>
  
</feed>
