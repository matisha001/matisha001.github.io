<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>matisha001&#39;s notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://matisha001.github.io/"/>
  <updated>2017-10-07T15:42:00.799Z</updated>
  <id>https://matisha001.github.io/</id>
  
  <author>
    <name>仰天長嘯歸去來，金戈鐵馬功壹場！</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vuex的使用</title>
    <link href="https://matisha001.github.io/2016/08/29/vuex/"/>
    <id>https://matisha001.github.io/2016/08/29/vuex/</id>
    <published>2016-08-28T16:00:00.000Z</published>
    <updated>2017-10-07T15:42:00.799Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://matisha001.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>react-router的使用</title>
    <link href="https://matisha001.github.io/2016/08/25/react-router/"/>
    <id>https://matisha001.github.io/2016/08/25/react-router/</id>
    <published>2016-08-24T16:00:00.000Z</published>
    <updated>2017-10-09T21:13:09.678Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="react" scheme="https://matisha001.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>vue-router的使用</title>
    <link href="https://matisha001.github.io/2016/08/25/vue-router/"/>
    <id>https://matisha001.github.io/2016/08/25/vue-router/</id>
    <published>2016-08-24T16:00:00.000Z</published>
    <updated>2017-10-07T15:41:46.886Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://matisha001.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6的使用</title>
    <link href="https://matisha001.github.io/2016/08/19/es6/"/>
    <id>https://matisha001.github.io/2016/08/19/es6/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2017-10-15T20:45:32.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="块的作用域-let"><a href="#块的作用域-let" class="headerlink" title="块的作用域-let"></a>块的作用域-let</h3><blockquote><p>let 定义的变量只能在定义的块中使用</p></blockquote><h3 id="恒量-const"><a href="#恒量-const" class="headerlink" title="恒量-const"></a>恒量-const</h3><blockquote><p>const 限制给衡量分配值的动作,不会限制恒量里面的值 </p><p>不能重复声明</p></blockquote><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="built_in">console</span>.log(a,b,c)</div></pre></td></tr></table></figure><h3 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:e,<span class="attr">b</span>:f,<span class="attr">c</span>:g&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(e,f,g)</div></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =<span class="number">1</span>,b=<span class="number">2</span></div><div class="line"><span class="keyword">let</span> c =<span class="string">` <span class="subst">$&#123;a&#125;</span> and <span class="subst">$&#123;b&#125;</span>`</span>  <span class="comment">//注意变量需要用&#123;&#125;包裹起来</span></div><div class="line"><span class="built_in">console</span>.log(c)</div></pre></td></tr></table></figure><h3 id="带标签的模版字符串"><a href="#带标签的模版字符串" class="headerlink" title="带标签的模版字符串"></a>带标签的模版字符串</h3><blockquote><p>处理字符串内的代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =<span class="number">1</span>,b=<span class="number">2</span></div><div class="line"><span class="keyword">let</span> c = test<span class="string">` <span class="subst">$&#123;a&#125;</span> and <span class="subst">$&#123;b&#125;</span> \n`</span>  <span class="comment">//注意变量需要用&#123;&#125;包裹起来</span></div><div class="line"><span class="built_in">console</span>.log(c)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">strings,...values</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(strings,strings.raw) <span class="comment">//模板字符串的每一部分对应的字符  原始字符 </span></div><div class="line">  <span class="built_in">console</span>.log(values)<span class="comment">//模板字符串的值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="判断字符串是否包含其他字符串"><a href="#判断字符串是否包含其他字符串" class="headerlink" title="判断字符串是否包含其他字符串"></a>判断字符串是否包含其他字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">"test"</span></div><div class="line">a.startsWith(<span class="string">"a"</span>) <span class="comment">//注意是starts  +  With</span></div><div class="line">a.endsWith(<span class="string">"a"</span>) <span class="comment">//注意是ends  +  With</span></div><div class="line">a.includes(<span class="string">"a"</span>) <span class="comment">//注意是includes</span></div></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a=<span class="number">1</span>,b=<span class="number">2</span></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a,b)</div><div class="line">&#125;</div><div class="line">test(<span class="number">3</span>,<span class="number">4</span>)</div></pre></td></tr></table></figure><h3 id="展开操作符"><a href="#展开操作符" class="headerlink" title="展开操作符"></a>展开操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],b=[<span class="number">0</span>,...a]</div><div class="line"><span class="built_in">console</span>.log(a)</div><div class="line"><span class="built_in">console</span>.log(...a)</div><div class="line"><span class="built_in">console</span>.log(b)</div></pre></td></tr></table></figure><h3 id="剩余操作符"><a href="#剩余操作符" class="headerlink" title="剩余操作符"></a>剩余操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,...c</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  <span class="built_in">console</span>.log(b)</div><div class="line">  <span class="built_in">console</span>.log(c)</div><div class="line">&#125;</div><div class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>) <span class="comment">//c 为一个数组</span></div></pre></td></tr></table></figure><h3 id="解构参数"><a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,&#123;c,d&#125;=&#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a,b,c,d)</div><div class="line">&#125;</div><div class="line">test(<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;)</div></pre></td></tr></table></figure><h3 id="函数的name属性"><a href="#函数的name属性" class="headerlink" title="函数的name属性"></a>函数的name属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> c = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">  <span class="comment">//函数声明，对应的name属性的值就是函数的名字。</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(c.name) <span class="comment">//test</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> d = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</div><div class="line"> <span class="comment">//使用匿名表达式定义的函数，对应的name属性的值就是变量的名字。</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(d.name) <span class="comment">//d</span></div></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="function"><span class="params">b</span> =&gt;</span> b;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a =<span class="function">(<span class="params">b,c</span>) =&gt;</span> &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a =<span class="function"><span class="params">()</span>  =&gt;</span> &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">使用babel编译文件</div><div class="line">babel main.js --watch  --out-file index.js</div></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>，b = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> c =&#123;</div><div class="line">  a:a,</div><div class="line">  b:b,</div><div class="line">  d: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> d = &#123;</div><div class="line">  a,</div><div class="line">  b,</div><div class="line">  d()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =&#123;&#125;;</div><div class="line"><span class="keyword">let</span> d= <span class="string">'b c'</span></div><div class="line">a.b=<span class="number">1</span>;</div><div class="line">a[<span class="string">'b c'</span>]=<span class="number">2</span>;<span class="comment">//a[d]=2;</span></div></pre></td></tr></table></figure><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><blockquote><p>对比两个值是否相等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>);</div><div class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>,<span class="number">-0</span>)</div></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><blockquote><p>把对象的值复制到另一个对象里</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =&#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.assign(</div><div class="line">  a,&#123;</div><div class="line">b:<span class="number">1</span></div><div class="line">  &#125;</div><div class="line">);</div><div class="line"><span class="built_in">console</span>.log(a)</div></pre></td></tr></table></figure><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><blockquote><p>设置对象的 prototype</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =&#123;</div><div class="line">  test()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> b =&#123;</div><div class="line">  test()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"2"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> c = <span class="built_in">Object</span>.creat(a);</div><div class="line"><span class="built_in">console</span>.log(c.test());<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(getPrototypeOf(c)===a);<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(c,b);</div><div class="line"><span class="built_in">console</span>.log(c.test());<span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(getPrototypeOf(c)===b);<span class="comment">//true</span></div></pre></td></tr></table></figure><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =&#123;</div><div class="line">  test()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> b =&#123;</div><div class="line">  test()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"2"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> c = &#123;</div><div class="line">__proto__:a</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(c.test());<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(getPrototypeOf(c)===a);<span class="comment">//true</span></div><div class="line"></div><div class="line">c.__proto__ = b;</div><div class="line"><span class="built_in">console</span>.log(c.test());<span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(getPrototypeOf(c)===b);<span class="comment">//true</span></div></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><blockquote><p>重新定义方法覆盖原来的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a =&#123;</div><div class="line">  test()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> b =&#123;</div><div class="line">  test()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"2"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> c = &#123;</div><div class="line">__proto__:a,</div><div class="line">test()&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.test() +<span class="string">"test001"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(c.test());<span class="comment">//1test001</span></div></pre></td></tr></table></figure></p></blockquote><h2 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h2><blockquote><p>迭代器 轮流交换</p><p>特点:每次执行都会返回一个对象:{value: xx,done:true/false}。除此之外，Iterators还会有一个next的方法。</p><p>每次执行next方法就会返回一个对象{value: xx,done:true/false}。如果没有迭代的东西，next执行以后返回{value: undefined,done:true}。done的值为true表示完成迭代。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    next()&#123;</div><div class="line">      <span class="keyword">let</span> done = (i &gt;= b.length);</div><div class="line">      <span class="keyword">let</span> value =!done ? b[i++]:<span class="literal">undefined</span>;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        value,</div><div class="line">        done</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> c = a([<span class="number">1</span>,<span class="number">2</span>]);</div><div class="line"><span class="built_in">console</span>.log(c.next())</div><div class="line"><span class="built_in">console</span>.log(c.next())</div><div class="line"><span class="built_in">console</span>.log(c.next())</div></pre></td></tr></table></figure><h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><p>生成迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'1'</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'2'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = a();</div><div class="line"><span class="built_in">console</span>.log(b.next());</div><div class="line"><span class="built_in">console</span>.log(b.next());</div><div class="line"><span class="built_in">console</span>.log(b.next());</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">c</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;d.length;i++)&#123;</div><div class="line">    <span class="keyword">yield</span> d[i];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> d =[<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(d.next());</div><div class="line"><span class="built_in">console</span>.log(d.next());</div><div class="line"><span class="built_in">console</span>.log(d.next());</div></pre></td></tr></table></figure><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class A()&#123;</div><div class="line">  constructor(b)&#123;  //基于这个类初始化，会自动调取这个方法</div><div class="line">  this.b = b;</div><div class="line">  &#125;</div><div class="line">  c()&#123;</div><div class="line">    console.log(this.b)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">let d = new A(&quot;1&quot;);</div><div class="line">d.c();</div></pre></td></tr></table></figure><h3 id="get-与-set"><a href="#get-与-set" class="headerlink" title="get 与 set"></a>get 与 set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>()</span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;  <span class="comment">//基于这个类初始化，会自动调取这个方法</span></div><div class="line">  <span class="keyword">this</span>.f =[];</div><div class="line">  &#125;</div><div class="line">  get test()&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.f;</div><div class="line">  &#125;</div><div class="line">  set test(f)&#123;</div><div class="line">    <span class="keyword">this</span>.f.push(f)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> A();</div><div class="line"><span class="built_in">console</span>.log(d.test = <span class="string">"1"</span>);</div><div class="line"><span class="built_in">console</span>.log(d.test = <span class="string">"2"</span>);</div><div class="line"><span class="built_in">console</span>.log(d.test);</div></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><blockquote><p>不需要实例化类，就可以使用的方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>()</span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(b)&#123;  <span class="comment">//基于这个类初始化，会自动调取这个方法</span></div><div class="line">  <span class="keyword">this</span>.b = b;</div><div class="line">  &#125;</div><div class="line">  staitc c()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.b)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">A.c(<span class="string">"1"</span>);</div></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>()</span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(b,c)&#123;  </div><div class="line">  <span class="keyword">this</span>.b = b;</div><div class="line">  <span class="keyword">this</span>.c = c;</div><div class="line">  &#125;</div><div class="line">  test()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.b&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.c&#125;</span>`</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(b,c)&#123;  </div><div class="line">  <span class="keyword">super</span>(b,c);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> B(<span class="string">"1"</span>,<span class="string">"2"</span>);</div><div class="line"><span class="built_in">console</span>.log(a.test());</div></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p> 不能包含重复东西的集合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">a.add(<span class="string">"1"</span>);</div><div class="line">a.add(<span class="string">"2"</span>);</div><div class="line">a.add(<span class="string">"3"</span>);</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">a.add(<span class="string">"1"</span>);<span class="comment">//没有变化</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a.size)<span class="comment">//项目个数</span></div><div class="line"><span class="built_in">console</span>.log(a.has(<span class="string">'1'</span>))<span class="comment">//判断是否存在项目</span></div><div class="line">a.delete(<span class="string">'2'</span>)<span class="comment">//删除项目</span></div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">a.forEach(<span class="function"><span class="params">a</span> =&gt;</span> &#123; <span class="comment">//循环处理Set里面的项目</span></div><div class="line">    <span class="built_in">console</span>.log(a)</div><div class="line">&#125;)</div><div class="line">a.clear()<span class="comment">//清空Set()</span></div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">let</span> b =&#123;&#125;,c =<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,d = <span class="string">"1"</span>;</div><div class="line">a.set(b,<span class="string">"1"</span>);</div><div class="line">a.set(c,<span class="string">"2"</span>);</div><div class="line">a.set(d,<span class="string">"3"</span>);</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(a.size)<span class="comment">//项目个数</span></div><div class="line"><span class="built_in">console</span>.log(a.get(b))<span class="comment">//项目对应的值</span></div><div class="line">a.delete(d)<span class="comment">//删除项目</span></div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(a.has(d))<span class="comment">//判断是否存在项目</span></div><div class="line">a.forEach(<span class="function">(<span class="params">value,key</span>) =&gt;</span> &#123; <span class="comment">//循环处理Map里面的项目</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;value&#125;</span> = <span class="subst">$&#123;key&#125;</span>`</span>);</div><div class="line">&#125;)</div><div class="line">a.clear()<span class="comment">//清空Map()</span></div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure></blockquote><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test1.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="string">"1"</span>;</div><div class="line"><span class="comment">//test2.js</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params">d,e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;d&#125;</span>,<span class="subst">$&#123;e&#125;</span>`</span>)</div><div class="line">&#125; </div><div class="line"><span class="keyword">export</span> &#123;a,b,c&#125;;</div><div class="line"><span class="comment">//test3.js</span></div><div class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">"./test2.js"</span></div><div class="line"><span class="built_in">console</span>.log(a,b)</div><div class="line"><span class="comment">//test4.js</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> c <span class="keyword">from</span> <span class="string">"./test2.js"</span></div><div class="line"><span class="built_in">console</span>.log(c.a,c.b);</div></pre></td></tr></table></figure><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test1.js</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params">d,e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;d&#125;</span>,<span class="subst">$&#123;e&#125;</span>`</span>)</div><div class="line">&#125; </div><div class="line"><span class="keyword">export</span> &#123;a,b,c <span class="keyword">as</span> test&#125;;</div><div class="line"><span class="comment">//test2.js</span></div><div class="line"><span class="keyword">import</span> &#123;a,b <span class="keyword">as</span> t&#125; <span class="keyword">from</span> <span class="string">"./test1.js"</span></div><div class="line"><span class="built_in">console</span>.log(a,t)</div></pre></td></tr></table></figure><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><blockquote><p>导入默认不需要{}<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test1.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params">d,e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;d&#125;</span>,<span class="subst">$&#123;e&#125;</span>`</span>)</div><div class="line">&#125; </div><div class="line"><span class="comment">//test2.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params">d,e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;d&#125;</span>,<span class="subst">$&#123;e&#125;</span>`</span>)</div><div class="line">&#125; </div><div class="line"><span class="keyword">export</span> &#123; c <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</div><div class="line"><span class="comment">//test3.js</span></div><div class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">"./test1.js"</span></div><div class="line">test();</div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;h3 id=&quot;块的作用域-let&quot;&gt;&lt;a href=&quot;#块的作用域-let&quot; class=&quot;headerlink&quot; title=&quot;块的作
      
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue-resource的使用</title>
    <link href="https://matisha001.github.io/2016/08/19/vue-resource/"/>
    <id>https://matisha001.github.io/2016/08/19/vue-resource/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2017-10-08T19:01:44.055Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://matisha001.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue的基础</title>
    <link href="https://matisha001.github.io/2016/08/19/vue/"/>
    <id>https://matisha001.github.io/2016/08/19/vue/</id>
    <published>2016-08-18T16:00:00.000Z</published>
    <updated>2017-10-09T21:03:12.860Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://matisha001.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用gulp配置react</title>
    <link href="https://matisha001.github.io/2016/02/10/gulp%20for%20react/"/>
    <id>https://matisha001.github.io/2016/02/10/gulp for react/</id>
    <published>2016-02-09T16:00:00.000Z</published>
    <updated>2017-10-08T19:02:10.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><blockquote><p>npm  i -g gulp </p><p>npm  i react  –save </p><p>npm  i –save-dev gulp gulp-browserify  gulp-concat gulp-react  lodash  reactify</p><p>bower init </p><p>bower install bootstrap –save</p></blockquote><a id="more"></a><h3 id="配置gulpfile-js"><a href="#配置gulpfile-js" class="headerlink" title="配置gulpfile.js"></a>配置gulpfile.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),<span class="comment">//运行任务</span></div><div class="line">connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>),<span class="comment">//运行connect服务器</span></div><div class="line">browserify = <span class="built_in">require</span>(<span class="string">'gulp-browserify'</span>),<span class="comment">//将组件拼接在一起,使浏览器代码也可以使用require来构建</span></div><div class="line">concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),<span class="comment">//将所有文件拼在一起</span></div><div class="line">port = process.env.port || <span class="number">5000</span>;</div><div class="line">gulp.task(<span class="string">'browserify'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.src(<span class="string">'./app/js/main.js'</span>)</div><div class="line">.pipe(browserify(&#123;</div><div class="line">transform: <span class="string">'reactify'</span>,</div><div class="line">&#125;))</div><div class="line">.pipe(gulp.dest(<span class="string">'./dist/js'</span>))</div><div class="line">&#125;);</div><div class="line"><span class="comment">// live reload </span></div><div class="line">gulp.task(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">connect.server(&#123;</div><div class="line"><span class="comment">// root:'./',</span></div><div class="line">port: port,</div><div class="line">livereload: <span class="literal">true</span>,</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 刷新js </span></div><div class="line">gulp.task(<span class="string">'js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.src(<span class="string">'./dist/**/*.js'</span>)</div><div class="line">.pipe( connect.reload() )</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 刷新html </span></div><div class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.src(<span class="string">'./app/**/*.html'</span>)</div><div class="line">.pipe( connect.reload() )</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'watch'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">gulp.watch(<span class="string">'./dist/**/*.js'</span>,[<span class="string">'js'</span>]);</div><div class="line">gulp.watch(<span class="string">'./app/**/*.html'</span>,[<span class="string">'html'</span>]);</div><div class="line">gulp.watch(<span class="string">'./app/js/**/*.js'</span>,[<span class="string">'browserify'</span>]);</div><div class="line">&#125;)</div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'browserify'</span>]);</div><div class="line">gulp.task(<span class="string">'serve'</span>,[<span class="string">'browserify'</span>,<span class="string">'connect'</span>,<span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;npm  i -g gulp &lt;/p&gt;
&lt;p&gt;npm  i react  –save &lt;/p&gt;
&lt;p&gt;npm  i –save-dev gulp gulp-browserify  gulp-concat gulp-react  lodash  reactify&lt;/p&gt;
&lt;p&gt;bower init &lt;/p&gt;
&lt;p&gt;bower install bootstrap –save&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="react" scheme="https://matisha001.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react的基础</title>
    <link href="https://matisha001.github.io/2016/01/19/react/"/>
    <id>https://matisha001.github.io/2016/01/19/react/</id>
    <published>2016-01-18T16:00:00.000Z</published>
    <updated>2017-10-09T21:02:54.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React语法"><a href="#React语法" class="headerlink" title="React语法"></a>React语法</h2><h3 id="React-render"><a href="#React-render" class="headerlink" title="React.render"></a>React.render</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = React.render( </div><div class="line">  &lt;Component/&gt;, </div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>),</div><div class="line">  callback</div><div class="line">)</div><div class="line"><span class="built_in">console</span>.log(test)</div></pre></td></tr></table></figure><blockquote><p>React.render返回的是一个在当前作用域上的一个对象 </p><a id="more"></a></blockquote><h3 id="React-createClass"><a href="#React-createClass" class="headerlink" title="React.createClass"></a>React.createClass</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//state初始状态</span></div><div class="line">  &#125;,</div><div class="line">  propTypes:&#123;</div><div class="line">    <span class="comment">//验证props格式是否正确</span></div><div class="line">  &#125;,</div><div class="line">  getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//props初始参数</span></div><div class="line">  &#125;,</div><div class="line">  componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//组件将要被装载</span></div><div class="line">  &#125;,</div><div class="line">  componentDidMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//组件已经被装载</span></div><div class="line">  &#125;,</div><div class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//组件将要被卸载</span></div><div class="line">    React.unmountComponentAtNode(  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) );<span class="comment">//删除react节点</span></div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;test&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><h2 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h2><blockquote><p>react生命周期分三个阶段装载、更新、卸载 </p></blockquote><h3 id="装载"><a href="#装载" class="headerlink" title="装载"></a>装载</h3><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h4><blockquote><p>react后期版本</p></blockquote><h4 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps()"></a>getDefaultProps()</h4><blockquote><p>props初始参数</p></blockquote><h4 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState()"></a>getInitialState()</h4><blockquote><p>state初始状态</p></blockquote><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><blockquote><p>组件将要被装载  改变state时，不会二次渲染</p></blockquote><h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><blockquote><p>  组件已经被装载<br>  改变state时，会二次渲染<br>  可以通过this.getDOMNode()获取dom<br>  进行ajax操作,获取值改变state</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.getDOMNode() );</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><blockquote><p>第一次加载组件的时候不会执行更新阶段。</p></blockquote><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps()"></a>componentWillReceiveProps()</h4><blockquote><p>子组件将要获取props,根据props来判断state是否需要更新,确保只渲染一次</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps:<span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><blockquote><p>是否允许更新</p><p>可以设置更新的限制</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">shouldComponentUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">nextProp,nextState</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><blockquote><p>组件将要被更新  shouldComponentUpdate返回为true时，不可以取消更新</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentWillUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">nextProp,nextState</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h4 id="render-1"><a href="#render-1" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><blockquote><p>组件已经被更新</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;,</div></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><blockquote><p>组件将要被卸载  </p><p>用于一些组件取消事件监听或者清除定时器</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    self.setState(&#123;</div><div class="line">      count: self.state.count + <span class="number">1</span>,</div><div class="line">    &#125;)</div><div class="line">  &#125;,<span class="number">1000</span>);</div><div class="line">&#125;,</div><div class="line">componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'you are tring to kill me !! '</span>)</div><div class="line">  clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">&#125;,</div><div class="line">killMySelf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  React.unmountComponentAtNode(  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>) );</div><div class="line">&#125;,</div><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> ( </div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;h1 &gt; 计数： &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt; </span></div><div class="line"><span class="regexp">      &lt;button onClick=&#123;this.killMySelf&#125;&gt;卸载掉这个组件&lt;/</span>button&gt;</div><div class="line">      &lt;Submessage/&gt;</div><div class="line">    &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  )</span></div><div class="line"><span class="regexp">&#125;,</span></div></pre></td></tr></table></figure><h2 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h2><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><blockquote><p>react组件的嵌套必须在外面用一个标签包裹起来</p><p>父组件在传递一个数组的时候,子组件必须要有一个key</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Components = React.createClass(&#123;</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> subComponents = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">      subComponents.push(</div><div class="line">        &lt;Component key=&#123;<span class="string">'subMsg'</span>+i&#125;/&gt;</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ( </div><div class="line">      &lt;div&gt;</div><div class="line">      &lt;h1&gt;你好世界！！！&lt;<span class="regexp">/h1&gt; </span></div><div class="line"><span class="regexp">      &#123;subComponents&#125;</span></div><div class="line"><span class="regexp">      &lt;/</span>div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="组件状态state"><a href="#组件状态state" class="headerlink" title="组件状态state"></a>组件状态state</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//获取初始状态</span></div><div class="line">  &#125;,</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      Count: <span class="number">1</span>,</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</div><div class="line">      test</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><blockquote><p>不要使用this.state来改变state的状态，要用this.setState({})来改变state的状态.调用setState,react将重新render一下。</p><p>如果非要使用this.state来改变state的状态，需要调用forceUpdate()</p></blockquote><h3 id="组件通信props"><a href="#组件通信props" class="headerlink" title="组件通信props"></a>组件通信props</h3><blockquote><p>this.props.children  用于表示闭合标签组件之间的内容</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Submessage &#123;...this.props &#125;  messages=&#123;<span class="keyword">this</span>.state.subMessages&#125; /&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Submessage = React.createClass(&#123;</div><div class="line">  propTypes:&#123;</div><div class="line">    <span class="comment">//验证props格式是否正确</span></div><div class="line">    messages: React.PropTypes.array.isRequired,</div><div class="line">  &#125;,</div><div class="line">  getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//props初始参数</span></div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> msgs = [];</div><div class="line">    <span class="keyword">this</span>.props.messages.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">msg,index</span>)</span>&#123;</div><div class="line">      msgs.push(</div><div class="line">        &lt;p&gt;&#123;msg&#125;&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">      )</span></div><div class="line"><span class="regexp">    &#125;);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">    return (</span></div><div class="line"><span class="regexp">      &lt;div&gt;&#123;msgs&#125;&lt;/</span>div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><blockquote><p>PropTypes种类有 bool、array、func、number、object、string等</p></blockquote><h3 id="组件指向ref"><a href="#组件指向ref" class="headerlink" title="组件指向ref"></a>组件指向ref</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="comment">//获取原生dom对象</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.mytest.getDOMNode());</div><div class="line">    <span class="built_in">console</span>.log(React.findDOMNode(<span class="keyword">this</span>.refs.mytest));</div><div class="line">    <span class="keyword">this</span>.refs.mytest.saySomething();</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Submessage ref=<span class="string">"mytest"</span> messages=&#123;<span class="keyword">this</span>.state.subMessages&#125; /&gt;</div><div class="line">        &lt;input ref=&#123;</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">comp</span>)</span>&#123;</div><div class="line">              React.findDOMNode(comp).focus()</div><div class="line">            &#125;</div><div class="line"></div><div class="line">          &#125;</div><div class="line">          /&gt;test</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Submessage = React.createClass(&#123;</div><div class="line">  saySomething：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"111"</span>)</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div onChange=&#123;<span class="keyword">this</span>.props.handleClick&#125;&gt;&#123;msgs&#125;&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><blockquote><p>ref指的是react对象,在子组件中定义其他方法,ref也可以实现调用。</p><p>ref是字符串,实际上也可以是函数</p></blockquote><h2 id="React事件"><a href="#React事件" class="headerlink" title="React事件"></a>React事件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component = React.createClass(&#123;</div><div class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      Count: <span class="number">1</span>,</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(e.nativeEvent);<span class="comment">//浏览器自带的event</span></div><div class="line">    <span class="built_in">console</span>.log(e.target);<span class="comment">//封装的event</span></div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</div><div class="line">        test</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div></pre></td></tr></table></figure><h2 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h2><blockquote><p>mixins和组件的生命周期是密切相关的,定义mixins目的就是让组件共用一些逻辑。</p></blockquote><h3 id="React双向数据流"><a href="#React双向数据流" class="headerlink" title="React双向数据流"></a>React双向数据流</h3><blockquote><p>react 采用的是单向数据流。</p><p>react-with-addons.js</p><p>实现react双向数据流,需要mixins</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var Component = React.createClass(&#123;</div><div class="line">  mixins: [ React.addons.LinkedStateMixin ],</div><div class="line">  render:function()&#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1&gt;&#123;this.state.message&#125;&lt;/h1&gt;</div><div class="line">        &lt;input type=&quot;text&quot; valueLink=&#123;this.linkState(&apos;message&apos;)&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="mixins开发"><a href="#mixins开发" class="headerlink" title="mixins开发"></a>mixins开发</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stateRecordMixin = &#123;</div><div class="line">  componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.oldStates = [];</div><div class="line">  &#125;,</div><div class="line">  componentWillUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProp,nextState</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.oldStates.push(nextState);</div><div class="line">  &#125;,</div><div class="line">  previousState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.oldStates.length <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> index == <span class="number">-1</span> ? &#123;&#125; : <span class="keyword">this</span>.oldStates[index];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> MessageBox = React.createClass(&#123;</div><div class="line">  mixins: [stateRecordMixin],</div><div class="line">  getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      count: <span class="number">0</span>,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  doUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      count: <span class="keyword">this</span>.state.count + <span class="number">1</span>,</div><div class="line">    &#125;);</div><div class="line">    alert(<span class="keyword">this</span>.previousState().count)</div><div class="line">  &#125;,</div><div class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> ( </div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1 &gt; 计数： &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt; </span></div><div class="line"><span class="regexp">        &lt;button onClick=&#123;this.doUpdate&#125;&gt;手动更新一下组件&lt;/</span>button&gt;</div><div class="line">        &lt;Submessage count=&#123;<span class="keyword">this</span>.state.count&#125;/&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div><div class="line"><span class="regexp">var Submessage = React.createClass(&#123;</span></div><div class="line"><span class="regexp">  mixins: [stateRecordMixin],</span></div><div class="line"><span class="regexp">  getInitialState:function()&#123;</span></div><div class="line"><span class="regexp">    return &#123;</span></div><div class="line"><span class="regexp">      count: 0,</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">  &#125;,</span></div><div class="line"><span class="regexp">  componentWillReceiveProps:function(nextProp)&#123;</span></div><div class="line"><span class="regexp">    this.setState(&#123;</span></div><div class="line"><span class="regexp">      count: this.props.count *2,</span></div><div class="line"><span class="regexp">    &#125;)</span></div><div class="line"><span class="regexp">  &#125;,</span></div><div class="line"><span class="regexp">  render:function()&#123;</span></div><div class="line"><span class="regexp">    console.log(this.previousState().count )</span></div><div class="line"><span class="regexp">    return (</span></div><div class="line"><span class="regexp">      &lt;h3&gt;当前子组件的计数是：&#123;this.state.count&#125;&lt;/</span>h3&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React语法&quot;&gt;&lt;a href=&quot;#React语法&quot; class=&quot;headerlink&quot; title=&quot;React语法&quot;&gt;&lt;/a&gt;React语法&lt;/h2&gt;&lt;h3 id=&quot;React-render&quot;&gt;&lt;a href=&quot;#React-render&quot; class=&quot;headerlink&quot; title=&quot;React.render&quot;&gt;&lt;/a&gt;React.render&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = React.render( &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Component/&amp;gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  callback&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(test)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;React.render返回的是一个在当前作用域上的一个对象 &lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="react" scheme="https://matisha001.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>redux的使用</title>
    <link href="https://matisha001.github.io/2016/01/19/redux/"/>
    <id>https://matisha001.github.io/2016/01/19/redux/</id>
    <published>2016-01-18T16:00:00.000Z</published>
    <updated>2017-10-08T17:49:12.711Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="react" scheme="https://matisha001.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack的使用</title>
    <link href="https://matisha001.github.io/2015/03/19/webpack/"/>
    <id>https://matisha001.github.io/2015/03/19/webpack/</id>
    <published>2015-03-18T16:00:00.000Z</published>
    <updated>2017-10-20T03:16:37.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i webpack --g</div><div class="line">webpack --help</div></pre></td></tr></table></figure><h2 id="使用webpack创建项目"><a href="#使用webpack创建项目" class="headerlink" title="使用webpack创建项目"></a>使用webpack创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init </div><div class="line">npm i webpack </div><div class="line">webpack enter.js  bundle.js</div></pre></td></tr></table></figure><blockquote><p>打包生成的bundle.js包含webpack本身需要的一些东西。</p><p>webpack提供了全局命令进行编译,也提供了通过node命令进行编译。</p></blockquote> <a id="more"></a><h3 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">var</span> test=<span class="built_in">require</span>(<span class="string">'./test'</span>);</div><div class="line"><span class="built_in">console</span>.log(test)</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="built_in">module</span>.exports=<span class="string">"matisha001"</span></div></pre></td></tr></table></figure><h3 id="loader转换器"><a href="#loader转换器" class="headerlink" title="loader转换器"></a>loader转换器</h3><blockquote><p>loader转换器是将资源从一种形式转化为另一种形式，最总转化为js。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常见的转换器</span></div><div class="line">css-loader、style-loader等</div><div class="line"><span class="built_in">require</span>(<span class="string">'style!css!./style.css'</span>);</div></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>默认的配置文件为webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">输入 webpack</div></pre></td></tr></table></figure></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry:<span class="string">'./main.js'</span>,<span class="comment">//入口文件</span></div><div class="line">  output:&#123;<span class="comment">//生成文件</span></div><div class="line">    path:__dirname,<span class="comment">//输出文件路径</span></div><div class="line">    publicPath:__dirname,<span class="comment">//请求静态资源绝对路径</span></div><div class="line">    filename:<span class="string">'[name].js'</span></div><div class="line">  &#125;,</div><div class="line">  resolve: &#123; <span class="comment">//模块相关配置</span></div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],<span class="comment">//自动补全文件后缀</span></div><div class="line">    fallback: [path.join(__dirname, <span class="string">'../node_modules'</span>)],<span class="comment">//找不到模块时，在node_modules下查找</span></div><div class="line">    alias: &#123;<span class="comment">//路径别名缩短路径长度</span></div><div class="line">      <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'../src'</span>),</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  resolveLoader: &#123;<span class="comment">//找不到模块时，在node_modules下查找</span></div><div class="line">    fallback: [path.join(__dirname, <span class="string">'../node_modules'</span>)]</div><div class="line">  &#125;,</div><div class="line">  devtool:<span class="string">'source-map'</span>,<span class="comment">//生成source-map文件</span></div><div class="line">  <span class="built_in">module</span>:&#123; <span class="comment">//要使用的模块</span></div><div class="line">    preLoaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.vue$/</span>,</div><div class="line">        loader: <span class="string">'eslint'</span>,</div><div class="line">        include: projectRoot,     <span class="comment">//编译目录</span></div><div class="line">        exclude: <span class="regexp">/node_modules/</span>   <span class="comment">//排除目录</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        loader: <span class="string">'eslint'</span>,</div><div class="line">        include: projectRoot,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.vue$/</span>,</div><div class="line">        loader: <span class="string">'vue'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        loader: <span class="string">'babel'</span>,</div><div class="line">        include: projectRoot,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.json$/</span>,</div><div class="line">        loader: <span class="string">'json'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.html$/</span>,</div><div class="line">        loader: <span class="string">'vue-html'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</div><div class="line">        loader: <span class="string">'url'</span>,</div><div class="line">        query: &#123;</div><div class="line">          limit: <span class="number">10000</span>,  <span class="comment">//小于10000生成base64，大于10000生成单独的文件</span></div><div class="line">          name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</div><div class="line">        loader: <span class="string">'url'</span>,</div><div class="line">        query: &#123;</div><div class="line">          limit: <span class="number">10000</span>,</div><div class="line">          name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  eslint: &#123; <span class="comment">//eslint错误信息友好提示</span></div><div class="line">    formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</div><div class="line">  &#125;,</div><div class="line">  vue: &#123;  <span class="comment">//vue文件中css处理loaders</span></div><div class="line">    loaders: utils.cssLoaders()</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="调试代码-source-map"><a href="#调试代码-source-map" class="headerlink" title="调试代码 source-map"></a>调试代码 source-map</h3><blockquote><p>生成source-map文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --devtool source-map</div></pre></td></tr></table></figure></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="keyword">debugger</span>;  <span class="comment">//代码打断点</span></div><div class="line"><span class="built_in">module</span>.exports=<span class="string">"matisha001"</span></div></pre></td></tr></table></figure><h3 id="babel转换"><a href="#babel转换" class="headerlink" title="babel转换"></a>babel转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装babel依赖</span></div><div class="line">npm i babel-loader  babel-core babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//创建.babelrc配置文件</div><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>:[<span class="string">"es2015"</span>] //设置babel预设</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'./name'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> name;</div></pre></td></tr></table></figure><h2 id="webpack插件"><a href="#webpack插件" class="headerlink" title="webpack插件"></a>webpack插件</h2><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>提供开发服务器、页面刷新、模块热替换(只替换有变化的内容，不需要刷新整个页面)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm i webpack-dev-server --g</div><div class="line">npm i webpack-dev-server --save-dev</div><div class="line">webpack-dev-server --inline --hot</div></pre></td></tr></table></figure><h3 id="webpack-merge"><a href="#webpack-merge" class="headerlink" title="webpack-merge"></a>webpack-merge</h3><blockquote><p>合并配置文件</p></blockquote><h3 id="http-proxy-middleware"><a href="#http-proxy-middleware" class="headerlink" title="http-proxy-middleware"></a>http-proxy-middleware</h3><blockquote><p>http协议代理中间件,可以代理转发api</p></blockquote><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><blockquote><p>webpack操作html的插件,将打包生成js、css插入到html模板里</p></blockquote><h3 id="eslint-friendly-formatter"><a href="#eslint-friendly-formatter" class="headerlink" title="eslint-friendly-formatter"></a>eslint-friendly-formatter</h3><blockquote><p>eslint错误信息友好提示</p></blockquote><h3 id="extract-text-webpack-plugin"><a href="#extract-text-webpack-plugin" class="headerlink" title="extract-text-webpack-plugin"></a>extract-text-webpack-plugin</h3><blockquote><p>webpack扩展插件</p></blockquote><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><blockquote><p>node框架,用于启动webserver</p></blockquote><h3 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h3><blockquote><p>express和weppack开发环境中间件 将编译好的文件放在内存中  当前目录没有该文件</p></blockquote><h3 id="webpack-hot-middleware"><a href="#webpack-hot-middleware" class="headerlink" title="webpack-hot-middleware"></a>webpack-hot-middleware</h3><blockquote><p>express和webpack 热更新配合的中间件</p></blockquote><h2 id="创建react项目"><a href="#创建react项目" class="headerlink" title="创建react项目"></a>创建react项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装依赖</span></div><div class="line">npm i babel-core babel-preset-es2015 babel-preset-react webpack webpack-dev-server babel-loader react-hot-loader --save-dev</div><div class="line">npm i react react-dom --save</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry:<span class="string">'./main.js'</span>,<span class="comment">//入口文件</span></div><div class="line">  output:&#123;<span class="comment">//生成文件</span></div><div class="line">    path:__dirname,</div><div class="line">    filename:<span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  devtool:<span class="string">'source-map'</span>,<span class="comment">//生成source-map文件</span></div><div class="line">  <span class="built_in">module</span>:&#123; <span class="comment">//要使用的模块</span></div><div class="line">    loaders:[</div><div class="line">      &#123;</div><div class="line">        test:[<span class="regexp">/\.js$/</span>,/\.jsx?$/],</div><div class="line">        exclude:<span class="regexp">/(node_modules)/</span>,</div><div class="line">        loader:<span class="string">'react-hot!babel'</span></div><div class="line"></div><div class="line">      &#125;,</div><div class="line">      &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">loader</span>:<span class="string">'style!css'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//创建.babelrc配置文件</div><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>:[<span class="string">"es2015"</span>,<span class="string">"react"</span>] //设置babel预设</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><h3 id="cssloaders配置"><a href="#cssloaders配置" class="headerlink" title="cssloaders配置"></a>cssloaders配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">exports.cssLoaders = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">  options = options || &#123;&#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span> (<span class="params">loaders</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sourceLoader = loaders.map(<span class="function"><span class="keyword">function</span> (<span class="params">loader</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> extraParamChar</div><div class="line">      <span class="keyword">if</span> (<span class="regexp">/\?/</span>.test(loader)) &#123;</div><div class="line">        loader = loader.replace(<span class="regexp">/\?/</span>, <span class="string">'-loader?'</span>)</div><div class="line">        extraParamChar = <span class="string">'&amp;'</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        loader = loader + <span class="string">'-loader'</span></div><div class="line">        extraParamChar = <span class="string">'?'</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> loader + (options.sourceMap ? extraParamChar + <span class="string">'sourceMap'</span> : <span class="string">''</span>)</div><div class="line">    &#125;).join(<span class="string">'!'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (options.extract) &#123;</div><div class="line">      <span class="keyword">return</span> ExtractTextPlugin.extract(<span class="string">'vue-style-loader'</span>, sourceLoader)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>, sourceLoader].join(<span class="string">'!'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    css: generateLoaders([<span class="string">'css'</span>]),</div><div class="line">    postcss: generateLoaders([<span class="string">'css'</span>]),</div><div class="line">    less: generateLoaders([<span class="string">'css'</span>, <span class="string">'less'</span>]),</div><div class="line">    sass: generateLoaders([<span class="string">'css'</span>, <span class="string">'sass?indentedSyntax'</span>]),</div><div class="line">    scss: generateLoaders([<span class="string">'css'</span>, <span class="string">'sass'</span>]),</div><div class="line">    stylus: generateLoaders([<span class="string">'css'</span>, <span class="string">'stylus'</span>]),</div><div class="line">    styl: generateLoaders([<span class="string">'css'</span>, <span class="string">'stylus'</span>])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="styleLoaders配置"><a href="#styleLoaders配置" class="headerlink" title="styleLoaders配置"></a>styleLoaders配置</h3><blockquote><p>对独立的css及其预处理文件进行编译</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">exports.styleLoaders = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> output = []</div><div class="line">  <span class="keyword">var</span> loaders = exports.cssLoaders(options)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> extension <span class="keyword">in</span> loaders) &#123;</div><div class="line">    <span class="keyword">var</span> loader = loaders[extension]</div><div class="line">    output.push(&#123;</div><div class="line">      test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\.'</span> + extension + <span class="string">'$'</span>),</div><div class="line">      loader: loader</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> output</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="wepack2的使用"><a href="#wepack2的使用" class="headerlink" title="wepack2的使用"></a>wepack2的使用</h2><blockquote><p>暂空</p></blockquote><h2 id="webpack3的使用"><a href="#webpack3的使用" class="headerlink" title="webpack3的使用"></a>webpack3的使用</h2><blockquote><p>暂空</p></blockquote><h2 id="vue-cli-webpack模板配置分析"><a href="#vue-cli-webpack模板配置分析" class="headerlink" title="vue-cli webpack模板配置分析"></a>vue-cli webpack模板配置分析</h2><p><a href="http://blog.csdn.net/hongchh/article/details/55113751" target="_blank" rel="external">vue-cli的webpack模板项目配置文件分析</a></p><h3 id="vue-cli-proxytable-配置"><a href="#vue-cli-proxytable-配置" class="headerlink" title="vue-cli proxytable 配置"></a>vue-cli proxytable 配置</h3><p><a href="http://blog.csdn.net/xmloveth/article/details/56847456" target="_blank" rel="external">npm模块之http-proxy-middleware使用教程</a></p><p><a href="http://blog.csdn.net/crasslandwolf/article/details/51276785" target="_blank" rel="external">http-proxy-middleware</a></p><p><a href="http://blog.csdn.net/wzygis/article/details/52224416" target="_blank" rel="external">Nodejs为代理npm设置代理</a></p><p><a href="http://blog.csdn.net/xyjawq1/article/details/54235245" target="_blank" rel="external">gulp-connect-proxy和http-proxy-middleware代理</a></p><p><a href="http://blog.csdn.net/qq_29436563/article/details/76851367" target="_blank" rel="external">node+express+http-proxy-middleware代理转发</a></p><p><a href="http://blog.csdn.net/remotesupport/article/details/7786556" target="_blank" rel="external">HTTP代理模块（HTTP Proxy）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装webpack&quot;&gt;&lt;a href=&quot;#安装webpack&quot; class=&quot;headerlink&quot; title=&quot;安装webpack&quot;&gt;&lt;/a&gt;安装webpack&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i webpack --g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack --help&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用webpack创建项目&quot;&gt;&lt;a href=&quot;#使用webpack创建项目&quot; class=&quot;headerlink&quot; title=&quot;使用webpack创建项目&quot;&gt;&lt;/a&gt;使用webpack创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm init &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm i webpack &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webpack enter.js  bundle.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;打包生成的bundle.js包含webpack本身需要的一些东西。&lt;/p&gt;
&lt;p&gt;webpack提供了全局命令进行编译,也提供了通过node命令进行编译。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://matisha001.github.io/tags/js/"/>
    
      <category term="react" scheme="https://matisha001.github.io/tags/react/"/>
    
      <category term="vue" scheme="https://matisha001.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>1像素边框</title>
    <link href="https://matisha001.github.io/2014/08/29/border-1px/"/>
    <id>https://matisha001.github.io/2014/08/29/border-1px/</id>
    <published>2014-08-28T16:00:00.000Z</published>
    <updated>2017-10-15T20:48:08.218Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="https://matisha001.github.io/tags/css/"/>
    
  </entry>
  
</feed>
