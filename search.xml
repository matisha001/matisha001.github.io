<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vuex2.x]]></title>
    <url>%2F2016%2F10%2F23%2Fvuex2.x%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vuex1.x]]></title>
    <url>%2F2016%2F10%2F23%2Fvuex1.x%2F</url>
    <content type="text"><![CDATA[第1步：加入 store 第2步：创建 action 第3步：创建 state 和 mutation 第4步：在组件获取值 State 和 Getters]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue2.x指令]]></title>
    <url>%2F2016%2F10%2F22%2Fvue2.x%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[内置指令v-model v-for v-if v-show v-else v-on v-once v-html v-bind v-on 自定义指令自定义全局指令12345678// 注册一个全局自定义指令 v-focusVue.directive(&apos;focus&apos;, &#123; // 当绑定元素插入到 DOM 中。 inserted: function (el) &#123; // 聚焦元素 el.focus() &#125;&#125;) 自定义局部指令123456directives: &#123; focus: &#123; // 指令的定义--- &#125;&#125;&lt;input v-focus&gt; 钩子函数bind: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作 inserted: 被绑定元素插入父节点时调用 update: 所在组件的 VNode 更新时调用 componentUpdated: 所在组件的 VNode 及其孩子的 VNode 全部更新时调用 unbind: 只调用一次， 指令与元素解绑时调用 钩子函数参数钩子函数被赋予了以下参数： el: 指令所绑定的元素，可以用来直接操作 DOM 。 binding: 一个对象，包含以下属性： name: 指令名，不包括 v- 前缀。 value: 指令的绑定值。 oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。 expression: 绑定值的字符串形式。 arg: 传给指令的参数。 modifiers: 一个包含修饰符的对象。 vnode: Vue 编译生成的虚拟节点 oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。 123456789101112131415161718Vue.directive(&apos;demo&apos;, &#123; bind: function (el, binding, vnode) &#123; var s = JSON.stringify el.innerHTML = &apos;name: &apos; + s(binding.name) + &apos;&lt;br&gt;&apos; + &apos;value: &apos; + s(binding.value) + &apos;&lt;br&gt;&apos; + &apos;expression: &apos; + s(binding.expression) + &apos;&lt;br&gt;&apos; + &apos;argument: &apos; + s(binding.arg) + &apos;&lt;br&gt;&apos; + &apos;modifiers: &apos; + s(binding.modifiers) + &apos;&lt;br&gt;&apos; + &apos;vnode keys: &apos; + Object.keys(vnode).join(&apos;, &apos;) &#125;&#125;)new Vue(&#123; el: &apos;#hook-arguments-example&apos;, data: &#123; message: &apos;hello!&apos; &#125;&#125;) 简写 123Vue.directive('color-swatch', function (el, binding) &#123; el.style.backgroundColor = binding.value&#125;) 对象字面量12345&lt;div v-demo="&#123; color: 'white', text: 'hello!' &#125;"&gt;&lt;/div&gt;Vue.directive('demo', function (el, binding) &#123; console.log(binding.value.color) // =&gt; "white" console.log(binding.value.text) // =&gt; "hello!"&#125;)]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-router2.x]]></title>
    <url>%2F2016%2F10%2F21%2Fvue-router2.x%2F</url>
    <content type="text"><![CDATA[基本写法在vue-router2.x中使用v-link 指令已经被 组件替代。 当 对应的路由匹配成功，将自动设置 class 属性值 .router-link-active。 动态路由的匹配 嵌套路由 在vue-rouer0.7x中，子路由用subRoutes。 编程式的导航 router.push(location) router.replace(location) 命名路由 命名视图 重定向和别名 HTML5 History 模式 全局钩子 某个路由独享的钩子 组件内的钩子 使用组件自身的生命周期钩子函数来替代activate 和 deactivate 在$router 上使用 watcher 来响应路由改变 (e.g. 比如基于新的路由参数获取数据) canActivate 可以被router 的配置中的 beforeEnter 中实现。 canDeactivate 已经被 beforeRouteLeave 取代, 后者在一个组件的根级定义中指定。这个钩子函数在调用时是将组件的实例作为其上下文的。 canReuse 已经被移除，因其容易混淆且很少被用到。 路由元信息 过渡特效 滚动行为 路由信息对象 Router_构造配置 Router_实例 对组件注入]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器的工作原理]]></title>
    <url>%2F2016%2F10%2F20%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[新式网络浏览器幕后揭秘 http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork 浏览器的工作原理 http://www.w3ctech.com/topic/48]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue2.x事件]]></title>
    <url>%2F2016%2F09%2F30%2Fvue2.x%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%2F</url>
    <content type="text"><![CDATA[事件自定义事件使用 v-on 绑定自定义事件 使用 $on(eventName) 监听事件 使用 $emit(eventName) 触发事件 父组件可以在使用子组件的地方直接用v-on来监听子组件触发的事件 不能用 $on 侦听子组件释放的事件，而必须在模板里直接用 v-on 绑定 可以使用 .native修饰v-on，在某个组件的根元素上监听一个原生事件 数据绑定子组件改变父组件 使用.sync 修饰符,当一个子组件改变了一个prop的值时，这个变化也会同步到父组件中所绑定的值。 (注意此处在 2.3.0版本以后) 123&lt;comp :foo.sync=&quot;bar&quot;&gt;&lt;/comp&gt;&lt;comp :foo=&quot;bar&quot; @update:foo=&quot;val =&gt; bar = val&quot;&gt;&lt;/comp&gt;更新事件 this.$emit(&apos;update:foo&apos;, newValue) 表单组件数据双向绑定 自定义事件可以用来创建自定义的表单输入组件，使用 v-model 来进行数据双向绑定。 123456789101112131415161718192021222324&lt;input v-model=&quot;something&quot;&gt;(2.2.0版本 )&lt;my-checkbox v-model=&quot;foo&quot; value=&quot;some value&quot;&gt;&lt;/my-checkbox&gt;Vue.component(&apos;my-checkbox&apos;, &#123; model: &#123; prop: &apos;checked&apos;, event: &apos;change&apos; &#125;, props: &#123; checked: Boolean, value: String &#125;,&#125;)等价形式&lt;my-checkbox :checked=&quot;foo&quot; @change=&quot;val =&gt; &#123; foo = val &#125;&quot; value=&quot;some value&quot;&gt;&lt;/my-checkbox&gt; v-model]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react生命周期]]></title>
    <url>%2F2016%2F09%2F29%2Freact%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>react</tag>
        <tag>frame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue2.x组件]]></title>
    <url>%2F2016%2F09%2F29%2Fvue2.x%E7%BB%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[组件基础组件的注册 DOM模板解析 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。 1&lt;ul&gt; ， &lt;ol&gt;， &lt;table&gt; ， &lt;select&gt; 限制了能被它包裹的元素， &lt;option&gt; 只能出现在其它元素内部。在自定义组件中使用这些受限制的元素时会导致一些问题。 自定义组件 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 is 属性。 如果您使用来自以下来源之一的字符串模板，这些限制将不适用123&lt;script type=&quot;text/x-template&quot;&gt;JavaScript 内联模版字符串.vue 组件 data-必须是函数 通过 Vue 构造器传入的各种选项大多数都可以在组件里用。data 是一个例外，它必须是函数 组件命名 组件未经 slot 元素传递内容，你甚至可以在组件名后使用 / 使其自闭合 可复用组件可复用的组件的API 来自三部分—— props , events ,和 slots Props 允许外部环境传递数据给组件 Events 允许组件触发外部环境的副作用 Slots 允许外部环境将额外的内容组合在组件中。 推荐使用slot内容分发的具名slot与作用域插槽具名slot主要用于移动端的header组件，作用域插槽主要用于列表类组件 Slot 分发内容分发内容是在父作用域内编译 1234&lt;child-component&gt; &#123;&#123; message &#125;&#125;&lt;/child-component&gt;message 应该绑定到父组件的数据 父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。 1234试图在父组件模板内将一个指令绑定到子组件的属性/方法&lt;!-- 无效 --&gt;&lt;child-component v-show=&quot;someChildProperty&quot;&gt;&lt;/child-component&gt;如果someChildProperty是子组件的属性。父组件模板不应该知道子组件的状态,要绑定作用域内的指令到对应子组件的根节点 单个slot 除非子组件模板包含至少一个插口，否则父组件的内容将会被丢弃。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。 在 标签中的任何内容都被视为备用内容。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。 具名Slot 元素可以用一个特殊的属性 name 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 slot 特性的元素。仍然可以有一个匿名 slot ，它是默认 slot ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。 作用域插槽作用域插槽是一种特殊类型的插槽，用作使用一个(能够传递数据到) 可重用模板替换已渲染元素。 在父级中，具有特殊属性scope的元素必须存在，表示它是作用域插槽的模板。scope的值对应一个临时变量名，此变量接收从子组件中传递的 props 对象 123456789101112131415子组件&lt;ul&gt; &lt;slot name="item" v-for="item in items" :text="item.text"&gt; &lt;!-- 这里写入备用内容 --&gt; &lt;/slot&gt;&lt;/ul&gt;父组件&lt;my-awesome-list :items="items"&gt; &lt;!-- 作用域插槽也可以是具名的 --&gt; &lt;template slot="item" scope="props"&gt; &lt;li class="my-fancy-item"&gt;&#123;&#123; props.text &#125;&#125;&lt;/li&gt; &lt;/template&gt;&lt;/my-awesome-list&gt; 各种组件动态组件多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用保留的 元素，动态地绑定到它的 is特性。 1&lt;!-- 组件在 vm.currentview 变化时改变！ --&gt; keep-alive组件存内存如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令参数。 12345&lt;keep-alive&gt; &lt;component :is="currentView"&gt; &lt;!-- 非活动组件将被缓存！ --&gt; &lt;/component&gt;&lt;/keep-alive&gt; 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 相似， 是一个抽象组件：它自身不会渲染一个DOM元素，也不会出现在父组件链中。当组件在 内被切换，它的 activated 和 deactivated这两个生命周期钩子函数将会被对应执行。主要用于保留组件状态或避免重新渲染。 递归组件组件在它的模板内可以递归地调用自己，不过，只有当它有 name 选项时才可以。 内联模版子组件有 inline-template特性，组件将把它的内容当作它的模板，而不是把它当作分发内容。 X-Templates 异步组件Vue.js 允许将组件定义为一个工厂函数，动态地解析组件的定义。Vue.js 只在组件需要渲染时触发工厂函数，并且把结果缓存起来，用于后面的再次渲染。 工厂函数接收一个resolve回调，在收到从服务器下载的组件定义时调用。也可以调用 reject(reason) 指示加载失败。 2.3.0 新增 123456789101112const AsyncComp = () =&gt; (&#123; // 需要加载的组件. 应当是一个 Promise component: import(&apos;./MyComp.vue&apos;), // loading 时应当渲染的组件 loading: LoadingComp, // 出错时渲染的组件 error: ErrorComp, // 渲染 loading 组件前的等待时间。默认：200ms. delay: 200, // 最长等待时间。超出此时间则渲染 error 组件。默认：Infinity timeout: 3000&#125;) v-once静态组件当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来。 通过v-once指令，能够执行一次性的插值，但数据变化时，插值处的内容不会更新，可能会影响到该节点上的数据绑定。 123&lt;span v-once&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;在vue1.x版本中禁止模板刷新数据使用的是&lt;span&gt;&#123;&#123;*message&#125;&#125;&lt;/span&gt; v-html12插入纯html代码以前用&#123;&#123;&#123;&#125;&#125;&#125;,现在用v-html&lt;div v-html="rawHtml"&gt;&lt;/div&gt; 子组件索引在 JavaScript 中直接访问子组件，可以使用ref为子组件指定一个索引 ID 。当ref和v-for一起使用时，ref是一个数组或对象，包含相应的子组件。 $refs 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用 $refs 。 组件的通信父子组件通信在 Vue 中，父子组件的关系可以总结为 props down, events up。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。 父组件向子组件props传递数据 组件实例的作用域是孤立的,让子组件使用父组件的数据,需要通过子组件的 props 选项。 prop 是父组件用来传递数据的一个自定义属性。子组件需要显式地用 props 选项 声明 “prop”。 HTML 特性不区分大小写。当使用非字符串模版时，名字形式为 camelCase 的 prop 用作特性时，需要转为 kebab-case（短横线隔开）。 在模板中,用 v-bind。每当父组件的数据变化时，该变化也会传导给子组件 123456&lt;!-- 传递了一个字符串 "1" --&gt;&lt;comp some-prop="1"&gt;&lt;/comp&gt;&lt;!-- 传递实际的 number --&gt;&lt;comp v-bind:some-prop="1"&gt;&lt;/comp&gt;prop传递的为字符串使用 v-bind，让它的值被当作 JavaScript 表达式计算 父组件的属性变化时，将传导给子组件,防止子组件无意修改了父组件的状态。每次父组件更新时，子组件的所有 prop 都会更新为最新值。 不应该在子组件内部改变 prop 12345定义一个局部变量，并用 prop 的值初始化它props: [&apos;initialCounter&apos;],data: function () &#123; return &#123; counter: this.initialCounter &#125;&#125; 1234567定义一个计算属性，处理 prop 的值并返回props: [&apos;size&apos;],computed: &#123; normalizedSize: function () &#123; return this.size &#125;&#125; 注意在 JavaScript中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。 组件可以为 props指定验证要求。如果未指定验证要求，Vue会发出警告。props是一个对象而不是字符串数组时，它包含验证要求 1234567891011121314151617181920212223242526272829&lt;div id=&quot;test&quot;&gt; &lt;comp :prop-a=&quot;1&quot; prop-b=&quot;1&quot;&gt;&lt;/comp&gt;&lt;/div&gt;Vue.component(&apos;example&apos;, &#123; props: &#123; // 基础类型检测 (`null` 意思是任何类型都可以) propA: Number, propB: [String, Number],// 多种类型 propC: &#123;// 必传且是字符串 type: String, required: true &#125;, propD: &#123;// 数字，有默认值 type: Number, default: 100 &#125;, propE: &#123;// 数组/对象的默认值应当由一个工厂函数返回 type: Object, default: function () &#123; return &#123; message: &apos;hello&apos; &#125; &#125; &#125;, propF: &#123;// 自定义验证函数 validator: function (value) &#123; return value &gt; 10 &#125; &#125; &#125;&#125;) type 可以是下面原生构造器:String Number Boolean Function Object Arraytype 也可以是一个自定义构造器，使用 instanceof 检测。 当 prop 验证失败，Vue 会在抛出警告。注意 props 会在组件实例创建之前进行校验 父组件向子组件非props传递数据123456bs-date-input 的子组件模板&lt;input type=&quot;date&quot; class=&quot;form-control&quot;&gt;&lt;bs-date-input data-3d-date-picker=&quot;true&quot; class=&quot;date-picker-theme-dark&quot;&gt;&lt;/bs-date-input&gt; 对于多数特性来说，传递给组件的值会覆盖组件本身设定的值。即例如传递 type=”large” 将会覆盖 type=”date” 且有可能破坏该组件！使用 class 和 style 特性的值都会做合并(merge)操作，让最终生成的值为：form-control date-picker-theme-dark。 子组件向父组件传递数据 使用.sync 修饰符,当一个子组件改变了一个prop的值时，这个变化也会同步到父组件中所绑定的值。 (注意此处在 2.3.0版本以后) 其他组件之间的通信1234567var bus = new Vue()// 触发组件 A 中的事件bus.$emit(&apos;id-selected&apos;, 1)// 在组件 B 创建的钩子中监听事件bus.$on(&apos;id-selected&apos;, function (id) &#123; // ...&#125;)]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react基础学习]]></title>
    <url>%2F2016%2F09%2F29%2Freact%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[React 简介起源React起源于Facebook的内部项目，该公司积极尝试引入HTML5技术用来架设Instagram网站，开发中发现HTML5的性能下降明显，达不到预期的效果。他们就自己开发了React框架。 特点虚拟DOM: React也是以数据驱动的，每次数据变化React都会扫码整个虚拟DOM树，自动计算与上次虚拟DOM的差异变化，然后针对需要变化的部分进行实际的浏览器DOM更新。组件化: React可以从功能角度横向划分，将UI分解成不同组件，各组件都独立封装，整个UI是由一个个小组件构成的一个大组件，每个组件只关系自身的逻辑，彼此独立。单项数据流: React设计者认为数据双向绑定虽然便捷，但在复杂场景下副作用也是很明显，所以React更倾向于单向的数据流动-从父节点传递到子节点。（使用ReactLink也可以实现双向绑定，但不建议使用） Hello world下载地址ReactJS官方地址：https://facebook.github.io/react/ GitHub地址：https://github.com/facebook/react 引用react.js和react-dom.js（注意引用顺序） react.js： 实现React核心逻辑，且于具体的渲染引擎无关，从而可以跨平台公用。如果应用要迁移到React Native，这一部分逻辑是不需要改变的。react-dom.js： 包含了具体的DOM渲染更新逻辑，以及服务端渲染的逻辑，这部分就是与浏览器相关的部分了。12&lt;script src="./common/react.js"&gt;&lt;/script&gt;&lt;script src="./common/react-dom.js"&gt;&lt;/script&gt; 1&lt;div id="reactContainer"&gt;&lt;/div&gt; 1234567891011&lt;script&gt; var HelloComponent = React.createClass(&#123; render:function() &#123; return React.createElement('h1', null, 'Hello world'); &#125; &#125;); ReactDOM.render( React.createElement(HelloComponent, null), document.getElementById('reactContainer') );&lt;/script&gt; React.createClass]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>react</tag>
        <tag>frame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue2过渡效果总结]]></title>
    <url>%2F2016%2F09%2F25%2Fvue2.x%E8%BF%87%E6%B8%A1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[单元素过渡Vue 提供了 transition 的封装组件 条件渲染 （使用 v-if） 条件展示 （使用 v-show） 动态组件 组件根节点 当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理： 自动嗅探目标元素是否有 CSS 过渡或动画，并在合适时添加/删除 CSS 类名。 如果过渡组件设置了过渡的 JavaScript 钩子函数，会在相应的阶段调用钩子函数。 如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作（插入/删除）在下一帧中立即执行。 过渡的-CSS-类名会有 6 个(CSS)类名在 enter/leave 的过渡中切换 v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。 v-enter-active: 定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition/animation 完成之后移除。 v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入一帧后生效（于此同时 v-enter 被删除），在 transition/animation 完成之后移除。 v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。 v-leave-active: 定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition/animation 完成之后移除。 v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发一帧后生效（于此同时 v-leave 被删除），在 transition/animation 完成之后移除。 这些在 enter/leave 过渡中切换的类名，v- 是这些类名的前缀。使用 可以重置前缀，比如 v-enter 替换为 my-transition-enter。 CSS 过渡与动画 主要是在css中使用transition,transform,animation,keyframes等css3属性。 CSS 动画用法同 CSS 过渡，区别是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend事件触发时删除。 自定义过渡类名 使用自定义过渡类名的特点就是优先级高于普通的类名,可以与第三方css动画库一起使用。 同时使用 Transitions 和 AnimationsVue 为了知道过渡的完成，必须设置相应的事件监听器。可以是 transitionend 或 animationend ，这取决于给元素应用的 CSS 规则。使用其中任何一种，Vue 能自动识别类型并设置监听。 同一个元素同时设置两种过渡动效，比如 animation很快的被触发并完成了，而transition 效果还没结束。在这种情况中，你就需要使用 type 特性并设置 animation 或 transition 来明确声明你需要 Vue 监听的类型。 过渡效果持续时间 （2.2.0版本 ） 一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果。在这种情况下你可以用 组件上的 duration 属性定制一个显性的过渡效果持续时间 (以毫秒计)。 1&lt;transition :duration=&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;...&lt;/transition&gt; javascript实现过渡效果 当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 。 否则，它们会被同步调用，过渡会立即完成。 使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。 初始渲染过渡 可以通过 appear特性设置节点的在初始渲染的过渡。默认和进入和离开过渡一样，可以自定义 CSS 类名，也可以使用js钩子。 12345678910&lt;transition appear appear-class=&quot;custom-appear-class&quot; appear-to-class=&quot;custom-appear-to-class&quot; (2.1.8+) appear-active-class=&quot;custom-appear-active-class&quot; v-on:appear=&quot;customAppearHook&quot; v-on:appear-cancelled=&quot;customAppearCancelledHook&quot;&gt; &lt;!-- ... --&gt;&lt;/transition&gt; 多元素过渡多个组件的过渡, 对于原生标签可以使用 v-if/v-else 。当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。 12345&lt;transition&gt; &lt;button v-bind:key="docState"&gt; &#123;&#123; buttonMessage &#125;&#125; &lt;/button&gt;&lt;/transition&gt; 过渡模式 一个离开过渡的时候另一个开始进入过渡。这是 的默认行为 - 进入和离开同时发生。 同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了 过渡模式 in-out: 新元素先进行过渡，完成之后当前元素过渡离开。 out-in: 当前元素先进行过渡，完成之后新元素过渡进入。 123&lt;transition name="fade" mode="out-in"&gt; &lt;!-- ... the buttons ... --&gt;&lt;/transition&gt; 多组件过渡123456789101112131415161718192021&lt;div id=&quot;test&quot;&gt; &lt;transition name=&quot;component-fade&quot; mode=&quot;out-in&quot;&gt; &lt;component v-bind:is=&quot;view&quot;&gt;&lt;/component&gt; &lt;/transition&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#test&apos;, data: &#123; view: &apos;v-a&apos; &#125;, components: &#123; &apos;v-a&apos;: &#123; template: &apos;&lt;div&gt;Component A&lt;/div&gt;&apos; &#125;, &apos;v-b&apos;: &#123; template: &apos;&lt;div&gt;Component B&lt;/div&gt;&apos; &#125; &#125;&#125;)&lt;/script&gt; 列表过渡使用 组件,同时渲染整个列表 不同于 ,它会以一个真实元素呈现：默认为一个 。也可以通过 tag 特性更换为其他元素。 内部元素 总是需要 提供唯一的 key 属性值 123456789&lt;div id="list-demo" class="demo"&gt; &lt;button v-on:click="add"&gt;Add&lt;/button&gt; &lt;button v-on:click="remove"&gt;Remove&lt;/button&gt; &lt;transition-group name="list" tag="p"&gt; &lt;span v-for="item in items" v-bind:key="item" class="list-item"&gt; &#123;&#123; item &#125;&#125; &lt;/span&gt; &lt;/transition-group&gt;&lt;/div&gt; 列表位移过渡组件还有一个特殊之处。不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 v-move 特性，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 name 属性来自定义前缀，也可以通过 move-class 属性手动设置。]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue2.0生命周期]]></title>
    <url>%2F2016%2F09%2F25%2Fvue2.x%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[生命周期]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue1.x 与vue 2.x的区别]]></title>
    <url>%2F2016%2F09%2F19%2Fvue1.x%20%E4%B8%8Evue%202.x%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[vue1.x 与vue 2.x的生命周期区别 数据绑定 在版本vue1.x中,prop默认是单向绑定：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。可以使用.sync 或 .once 绑定修饰符显式地强制双向或单次绑定。 123456&lt;!-- 默认为单向绑定 --&gt;&lt;child v-bind:my-message=&quot;parentMsg&quot;&gt;&lt;/child&gt;&lt;!-- 双向绑定 --&gt;&lt;child v-bind:my-message.sync=&quot;parentMsg&quot;&gt;&lt;/child&gt;&lt;!-- 单次绑定 --&gt;&lt;child v-bind:my-message.once=&quot;parentMsg&quot;&gt;&lt;/child&gt; 详细见vue2.x事件与数据绑定]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>frame</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js-事件冒泡机制]]></title>
    <url>%2F2016%2F03%2F19%2Fjs-%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[应用场景 点击li弹出对应的innerHTML。 1234567 &lt;ul id="ul"&gt; &lt;li&gt;item1&lt;/li&gt; &lt;li&gt;item2&lt;/li&gt; &lt;li&gt;item3&lt;/li&gt; &lt;li&gt;item4&lt;/li&gt; &lt;li&gt;item5&lt;/li&gt;&lt;/ul&gt; 当需要对很多元素添加事件的时，可以通过将事件添加到它们的父节点通过委托来触发处理函数。其中利用到了浏览器的事件冒泡机制。 jquery方案：123$("ul").on("click", function (e) &#123; console.log(e.target.innerHTML)&#125;) javascript封装（参考）：1234567891011121314151617181920212223function bindEvent(el, ev, sel, fn)&#123; if(fn == null) &#123; fn = sel; sel = null; &#125; el.addEventListener(ev,function(e)&#123; var target; e.preventDefault(); if(sel)&#123; target = e.target; if(target.matches(sel))&#123; fn.call(target, e) &#125; &#125;else&#123; fn(e); &#125; &#125;) &#125;bindEvent('ul','click','li',function(e)&#123; console.log(this.innerHTML);&#125;) 补充DOM2.0模型将事件处理流程分为三个阶段：事件捕获阶段、事件目标阶段、事件起泡阶段 事件捕获：当某个元素触发某个事件（如onclick），顶层对象document就会发出一个事件流，随着DOM树的节点向目标元素节点流去，直到到达事件真正发生的目标元素。在这个过程中，事件相应的监听函数是不会被触发的。 事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。 事件起泡：从目标元素开始，往顶层元素传播。途中如果有节点绑定了相应的事件处理函数，这些函数都会被一次触发。如果想阻止事件起泡，可以使用e.stopPropagation()（Firefox）或者e.cancelBubble=true（IE）来组织事件的冒泡传播。 2017前端面试题之Js篇（1）]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6新增特性]]></title>
    <url>%2F2016%2F02%2F19%2Fes6%2F</url>
    <content type="text"><![CDATA[let和const命令 不存在变量提升不可重复声明只在声明所在的块级作用域内有效对于const来说只声明不赋值会报错 let命令1234567var a = [];for (var i = 0; i &lt; 10; i++) &#123; a[i] = function () &#123; console.log(i); &#125;;&#125;a[6](); // 10 如果使用let，声明的变量仅在块级作用域内有效，最后输出的是6。1234567var a = [];for (let i = 0; i &lt; 10; i++) &#123;a[i] = function () &#123; console.log(i);&#125;;&#125;a[6](); // 6 另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。1234567for (let i = 0; i &lt; 3; i++) &#123;let i = 'abc';console.log(i);&#125;// abc// abc// abc 不存在变量提升，let所声明的变量一定要在声明后使用，否则报错。var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。 const命令const声明一个只读的常量。一旦声明，常量的值就不能改变。12345const a = 1;a // 1a = 2;// TypeError: Assignment to constant variable. const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。12const foo;// SyntaxError: Missing initializer in const declaration 变量的解构赋值 变量的声明和赋值是一体的，使用let或者const不可以重复定义 es6允许按照一定的模式，从数组和对象中提取值，对变量进行赋值。本质是模式匹配。 数组的解构赋值只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。 数组模式和赋值模式统一： 1let [a,[b,c],d]=[1,[2,3],4]; 如果等号两边形式不一样，很可能获得undefined或者直接报错。 解构的默认值： 12345let [foo = true] =[];console.log(foo); //控制台打印出truelet [a,b="Feng"]=['hello']console.log(a+b); //控制台显示“helloFeng” 需要注意的是undefined和null的区别12345let [a,b="Feng"]=['hello',undefined];console.log(a+b); //控制台显示“helloFeng”let [a,b="Feng"]=['hello',null];console.log(a+b); //控制台显示“hellonull” undefined相当于什么都没有，b是默认值。null相当于有值，但值为null。所以b并没有取默认值，而是解构成了null。 对象的解构赋值 对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。 如果在解构之前就定义了变量，这时候你再解构会出现问题。加圆括号解决：123let foo;(&#123;foo&#125; =&#123;foo:'Feng'&#125;);console.log(foo); //控制台输出Feng 扩展运算符和rest运算符对象扩展运算符（…）当编写一个方法时，我们允许它传入的参数是不确定的。这时候可以使用对象扩展运算符来作参数，看一个简单的列子：12345678function foo(...arg)&#123; console.log(arg[0]); console.log(arg[1]); console.log(arg[2]); console.log(arg[3]); &#125;foo(1,2,3);//1,2,3，undefined 这样，可以传入多个值，并且就算方法中引用多了也不会报错。 扩展运算符的用处： 我们先用一个例子说明，我们声明两个数组arr1和arr2，然后我们把arr1赋值给arr2，然后我们改变arr2的值，你会发现arr1的值也改变了，因为我们这是对内存堆栈的引用，而不是真正的赋值。12345let arr1=['a','b','c'];let arr2=arr1;console.log(arr2);//["a", "b", "c"]arr2.push('D');console.log(arr1);//["a", "b", "c", "D"] 显然这不是我们想要的，可以利用扩展运算符解决：1234567let arr1=['a','b','c'];//let arr2=arr1;let arr2=[...arr1];console.log(arr2);//["a", "b", "c"]arr2.push('D');console.log(arr2);//["a", "b", "c", "D"]console.log(arr1);//["a", "b", "c"] rest运算符如果你已经很好的掌握了对象扩展运算符，那么理解rest运算符并不困难，它们有很多相似之处，甚至很多时候你不用特意去区分。它也用…（三个点）来表示，我们先来看一个例子。123456function foo(first,...arg)&#123; for(let val of arg)&#123; console.log(val); &#125;&#125;foo(0,1,2,3,4,5,6,7); 字符串模版ES6对字符串新增的操作，最重要的就是字符串模版，字符串模版的出现让我们再也不用拼接变量了，而且支持在模板里有简单计算操作。 字符串模版支持html标签: 123let hello='hello';let hw = `$&#123;hello&#125;&lt;b&gt;world!&lt;/b&gt;&lt;br/&gt;字符串模版。`;document.write(hw); 对运算的支持： 1234let a=1;let b=2;let result=`$&#123;a+b&#125;`;document.write(result); 字符串查找 ES6还增加了字符串的查找功能，而且支持中文! 查找是否存在:1234let hello='你好';let hw = '。。。你好！world！';console.log(hw.indexOf(hello));//3 ES5console.log(hw.includes(hello));//true ES6 判断开头是否存在：1console.log(hw.startsWith(hello)); 判断结尾是否存在：1console.log(hw.endsWith(hello)); 复制字符串1console.log('ha |'.repeat(3));//ha |ha |ha |]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript经典算法]]></title>
    <url>%2F2015%2F09%2F19%2Fjavascript%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[冒泡排序123456789101112function bubbleSort(arr)&#123; for(i=0; i&lt;arr.length-1; i++)&#123; for(j=i+1; j&lt;arr.length; j++)&#123; if(arr[i] &gt; arr[j])&#123; var temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; &#125; &#125; return arr;&#125; 数组去重 利用Object中key的唯一性，用key来进行筛选。 12345678910111213function unique(arr)&#123; var obj = &#123;&#125; var result = [] for(var i in arr)&#123; if(!obj[arr[i]])&#123; obj[arr[i]] = true; result.push(arr[i]); &#125; &#125; return result;&#125;//ES6中Set实现：let result = new Set([1,1,1,1,3]); 数组中最大差值123456789function getMaxProfit(arr)&#123; var min = arr[0], max = arr[0]; for(var i = 0; i &lt; arr.length; i++)&#123; if(arr[i] &lt; min) min = arr[i]; if(arr[i] &gt; max) max = arr[i]; &#125; return max - min;&#125; 统计字符串中次数最多字母 利用Object中key的唯一性，用key来进行筛选并计数 12345678910111213141516171819202122function findMaxDuplicateChar(str) &#123; if(str.length == 1) &#123; return str; &#125; var charObj = &#123;&#125;; for(var i = 0; i &lt; str.length; i++) &#123; if(!charObj[str.charAt(i)]) &#123; charObj[str.charAt(i)] = 1; &#125; else &#123; charObj[str.charAt(i)] += 1; &#125; &#125; var maxChar = '', maxValue = 1; for(var k in charObj) &#123; if(charObj[k] &gt;= maxValue) &#123; maxChar = k; maxValue = charObj[k]; &#125; &#125; return maxChar + '：' + maxValue;&#125; 翻转字符串 反向遍历字符串 123456function reverseString(str)&#123; var tmp = ''; for(var i=str.length-1; i&gt;=0; i--) tmp += str[i]; return tmp&#125; 转化成array操作 123456789101112131415161718function reverseString(str)&#123; var arr = str.split(""); var i = 0,j = arr.length-1; while(i&lt;j)&#123; tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; i++; j--; &#125; return arr.join("");----------------------function reverseString(str) &#123; str = str.split('').reverse().join(''); return str;&#125;reverseString("hello");&#125; 生成指定长度随机字符串12345678function randomString(n)&#123; var str = 'abcdefghijklmnopqrstuvwxyz0123456789'; var tmp = ''; for(var i=0; i&lt;n; i++) &#123; tmp += str.charAt(Math.round(Math.random()*str.length)); &#125; return tmp;&#125; 生成菲波那切数列（强制）123456789101112function getfib(n)&#123; if(n == 0) return 0; if(n == 1) return 1; if(n &gt; 1) return getfib(n-1) + getfib(n-2);&#125;function fibo(len)&#123; var fibo = []; for(var i = 0; i &lt; len; i++)&#123; fibo.push(getfib(i)); &#125; return fibo;&#125; 快速排序12345678910111213141516171819202122232425262728293031323334var quickSort = function(arr)&#123; if(arr.length &lt;= 1)&#123; return arr; &#125; //定义一个左数组，定义一个右数组 let leftArr = []; let rightArr = []; //选定一个参照值 let tag = arr[0]; /* * 使用如下方式判断，会把重复元素去掉，就实现了快排的同时去重 */ for(let i = 0; i &lt; arr.length; i++)&#123; if(arr[i] &lt; tag)&#123; //将比tag小的元素放在左数组中 leftArr.push(arr[i]); &#125; if(arr[i] &gt; tag)&#123; //将比tag大的元素放在右数组中 rightArr.push(arr[i]); &#125; &#125; //使用如下方式就是使用快排进行排序，不去重 for(let i = 1; i &lt; arr.length; i++)&#123; if(arr[i] &lt; tag)&#123; //将比tag小的元素放在左数组中 leftArr.push(arr[i]); &#125;else&#123; //将比tag大的元素放在右数组中 &#125; &#125; //递归调用 return [].concat(quickSort(leftArr),[tag],quickSort(rightArr));]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS总结]]></title>
    <url>%2F2015%2F01%2F19%2FCSS%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[当margin的值为百分比形式时,为什么浏览器会根据父容器宽度得出计算值？一个符合W3C标准的浏览器会根据父容器的宽度进行计算，但是这个仅限于书写模式为横向的时候。因为在横向排版时，宽度”有迹可循”，可以把浏览器宽度作为参考，但是高度是不固定的，所以margin百分比值在计算时会参考父容器的宽度。当书写模式改为纵向，其计算参考便会变为父容器的高度了。 demohttp://dongtianee.sinaapp.com/demo6.html 12345/*修改书写模式*/.demo&#123;-webkit-writing-mode: vertical-rl; /* for webkit */ writing-mode: tb-rl; /* for ie */ &#125; 结论：一个符合W3C标准的浏览器,当margin的值为百分比形式时,会根据书写的模式来判断根据高度还是宽度来计算 margin：auto为什么只能实现水平居中，不能垂直居中？网页排版时，常规流的块级元素水平方向总是铺满浏览器窗口,垂直方向各块级元素按照先后顺序从上往下排列,当页面内容过多时网页会出现纵向滚动条，因此原理上纵向是可以无限扩展的,计算时找不到一个固定的参考值,所以纵向的auto无法生效。 margin:auto会受书写模式的影响。当书写模式为纵向时，margin：auto垂直方向是可以居中的。其实受到书写模式影响的属性除了这些外，还有margin折叠、padding百分比值的计算等。 清除浮动有N种方式，他们间有什么共同点吗？所谓清除浮动，一般是为了解决子元素浮动导致父容器高度坍塌。 一个position:fixed的元素相对于一个容器定位而非浏览器视口吗？CSS实现了一个position:fixed的元素相对于一个容器定位 当一个元素应用了CSS3的transform属性后，它的后代元素的fixed都将失效。 怪异盒模型box-sizing？弹性盒模型|盒布局? 在标准模式下的盒模型：盒子总宽度/高度=width/height+padding+border+margin在怪异模式下的盒模型下，盒子的总宽度和高度是包含内边距padding和边框border宽度在内的，盒子总宽度/高度=width/height + margin = 内容区宽度/高度 + padding + border + margin;box-sizing有两个值一个是content-box，另一个是border-box。当设置为box-sizing:content-box时，将采用标准模式解析计算；当设置为box-sizing:border-box时，将采用怪异模式解析计算。 a点击出现框，解决方法:1234567a,a:hover,a:active,a:visited,a:link,a:focus&#123; -webkit-tap-highlight-color:rgba(0,0,0,0); -webkit-tap-highlight-color: transparent; outline:none;background: none; text-decoration: none;border:none; -webkit-appearance: none; &#125; 图片和文字在同一行显示?1、在css中给div添加上“vertical-align:middle”属性。2、分别把图片和文字放入不同的div中，然后用“margin”属性进行定位，就可以使他们显示在同一行。3、把图片设置为背景图片。 CSS实现面板的隐藏和显示的三种方式第一种利用了label和checkbox，使控制方和被控制方不需要有特定的HTML结构关系，但是需要额外的HTML标签来支持。第二种方式利用了hover和子元素选择器，第三种方式利用了focus和兄弟元素选择器，后两种都受限于特定的HTML结构。三种方法都只使用CSS实现了面板的隐藏显示。 demo http://dongtianee.sinaapp.com/demo8.html CSS图标 demo http://www.uiplayground.in/css3-icons/ 针对IE6，7的hack1234567&lt;!DOCTYPE html&gt;&lt;!--[if lt IE 7 ]&gt;&lt;html class="ie6"&gt;&lt;![endif]--&gt;&lt;!--[if IE 7 ]&gt;&lt;html class="ie7"&gt;&lt;![endif]--&gt;&lt;!--[if IE 8 ]&gt;&lt;html class="ie8"&gt;&lt;![endif]--&gt;&lt;!--[if IE 9 ]&gt;&lt;html class="ie9"&gt;&lt;![endif]--&gt;&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;&lt;html class="w3c"&gt;&lt;!--&lt;![endif]--&gt;&lt;head&gt; 123456789.ie7 #hd_usernav:before, .ie8 #hd_usernav:before &#123;display: none&#125;.ie6 .skin_no #hd_nav li, .ie7 .skin_no #hd_nav li, .ie8 .skin_no #hd_nav li &#123;border-right-color: #c5c5c5&#125;.ie6 .skin_no #hd_nav a, .ie7 .skin_no #hd_nav a, .ie8 .skin_no #hd_nav a &#123;color: #c5c5c5&#125; 行内级元素可以设置宽高吗？有一些特殊的行内元素，比如img，input，select等等，是可以被设置宽高的。一个内容不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。比如img是一个置换元素，当不对它设置宽高时，它会按照本身的宽高进行显示。 CSS规则根据优先级生效，低优先级的规则会被浏览器忽略还是覆盖？多个优先级的样式都会被渲染，只不过高优先级会覆盖住低优先级，元素呈现为高优先级的样式。浏览器只会为生效的CSS规则中的图片资源发出http请求。 在现代浏览器中，一个页面从请求到呈现，大致需要经过解析-构建DOM树-构建呈现树（框架树）-布局（重排）-绘制等几个步骤。浏览器计算完优先级后，只有后定义的背景图案规则被构建到呈现树上。接下来浏览器会进行重排和绘制，浏览器在绘制时才会请求背景图片规则用到的图片文件。这就是为什么只发出一个HTTP请求的原因。 使用margin可以做出圆角按钮的原理是什么？当不能使用border-radius时,制造1px圆角的小技巧：button中嵌套span，设置span的margin为：”margin:1px -1px”。 图中红色框为span标签，蓝色框为a标签。当设置span的左右margin为-1px时，其便会在左右各突出1px，造成一种1px圆角的视觉效果。同样的道理，在实现一些古老浏览器下的圆角与底色渐变的按钮时，通常也会利用到多层元素层叠制造视觉误差的原理。 常见兼容性问题？1、png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.也可以引用一段脚本处理。 2、浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。 3、IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。 4、浮动ie产生的双倍距离（IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。） #box{ float:left; width:10px; margin:0 0 0 100px;} 这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——display:inline;将其转化为行内属性。(这个符号只有ie6会识别) 5、渐进识别的方式，从总体中逐渐排除局部。 首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。 接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。css// .bb{ background-color:#f1ee18; .background-color:#00deff\9; +background-color:#a200ff; _background-color:#1e0bd1; } 6、IE下,可以使用获取常规属性的方法来获取自定义属性, 也可以使用getAttribute()获取自定义属性; Firefox下,只能使用getAttribute()获取自定义属性. 解决方法:统一通过getAttribute()获取自定义属性。 7、IE下,event对象有x,y属性,但是没有pageX,pageY属性; Firefox下,event对象有pageX,pageY属性,但是没有x,y属性. * 解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。 8、Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。 9、超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序: L-V-H-A : a:link {} a:visited {} a:hover {} a:active {} 10、上下margin重合问题ie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。解决方法，养成良好的代码编写习惯，同时采用margin-top或者同时采用margin-bottom。 11、ie6对png图片格式支持不好(引用一段脚本处理) 怎样去掉选中时的虚线框？利用onfocus=”this.blur();”例如： 1&lt;a href="#" onfocus="this.blur();"&gt;测试&lt;/a&gt; 设置图片元素上下垂直居中1、diaplay:table-cell（IE6\7不兼容）2、position加margin（IE6不支持）12345678910.wrap .center &#123; width: 100px; height: 100px; margin: auto; position: absolute; left: 0; right: 0; top: 0; bottom: 0;&#125; 3、position加transform （ie9以下不支持 transform，手机端表现的比较好）123456.wrap .center &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; 4、flex;align-items: center;justify-content: center（移动端首选）12345.wrap &#123; display: flex; align-items: center; justify-content: center;&#125; 5、display:flex;margin:auto（移动端首选）123456.wrap &#123; display: flex;&#125;.wrap .center &#123; margin: auto;&#125; 6、纯position（适用于所有浏览器）12345678910111213141516171819/* 方法一：*/.wrap .center &#123; position: absolute; width: 100px; height: 100px; left: 50px;/*left=(父元素的宽 - 子元素的宽 ) / 2 */ top: 50px;/*top=(父元素的高 - 子元素的高 ) / 2 */&#125;/* 方法二：*/.wrap .center &#123; background: green; position: absolute; width: 100px; height: 100px; left: 50%;/*left值固定为50% */ top: 50%;/*top固定为50% */ margin-left:-50px;/*-（子元素的宽/2） */ margin-top:-50px;/*-（子元素的高/2） */&#125; px/em/rem有什么区别？ 为什么通常给font-size 设置的字体为62.5%?相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。1、em的值并不是固定的；2、em会继承父级元素的字体大小。使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。rem是相对于浏览器进行缩放的。1rem默认是16px，在响应式布局中，一个个除来转换成rem，太麻烦，所以重置rembody{font-size=62.5% } 此时1rem = 10px;若是12px则是1.2rem。 CSS3有哪些新特性？1、边框：border-radius、box-shadow、border-image2、背景：background-size、background-origin3、文本效果：text-shadow、word-wrap4、字体：@font-face规则5、2D转换：translate()、rotate()、scale()、skew()、matrix()6、3D转换：rotateX()、rotateY()7、过渡：transition：transition-property transition-duration transition-timing-function transition-delay8、动画：@keyframes规则@keyframes myfirst {from{}to{}}//定义动画div{animation: myfirst 5s linear 2s infinite alternate;} animation对应的属性 写法：animation: name duration timing-function delay iteration-count direction; 下面是对应的属性的介绍animation-name 规定需要绑定到选择器的 keyframe 名称。animation-duration 规定完成动画所花费的时间，以秒或毫秒计。animation-timing-function 规定动画的速度曲线。animation-delay 规定在动画开始之前的延迟。animation-iteration-count 规定动画应该播放的次数。animation-direction 规定是否应该轮流反向播放动画。 伪类选择器和伪元素？CSS3中引入的伪类选择器有？CSS3中伪元素有?伪类用一个冒号来表示，而伪元素则用两个冒号来表示。伪类选择器：由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。伪元素选择器：并不是针对真正的元素使用的选择器，而是针对CSS中已经定义好的伪元素使用的选择器；CSS3中引入的伪类选择器：:root()选择器，根选择器，匹配元素E所在文档的根元素。在HTML文档中，根元素始终是。:root选择器等同于元素。 :not()选择器称为否定选择器，和jQuery中的:not选择器一模一样，可以选择除某个元素之外的所有元素。 :empty()选择器表示的就是空。用来选择没有任何内容的元素，这里没有内容指的是一点内容都没有，哪怕是一个空格。 :target()选择器来对页面某个target元素(该元素的id被当做页面中的超链接来使用)指定样式，该样式只在用户点击了页面中的超链接，并且跳转到target元素后起作用。 :first-child()选择器表示的是选择父元素的第一个子元素的元素E。简单点理解就是选择元素中的第一个子元素，记住是子元素，而不是后代元素。 :nth-child()选择某个元素的一个或多个特定的子元素。 :nth-last-child()从某父元素的最后一个子元素开始计算，来选择特定的元素 :nth-of-type(n)选择器和:nth-child(n)选择器非常类似，不同的是它只计算父元素中指定的某种类型的子元素。 :only-child表示的是一个元素是它的父元素的唯一一个子元素。 :first-line为某个元素的第一行文字使用样式。 :first-letter 为某个元素中的文字的首字母或第一个字使用样式。 :before 在某个元素之前插入一些内容。 :after 在某个元素之后插入一些内容。 CSS3中伪元素： ::first-line选择元素的第一行，比如说改变每个段落的第一行文本的样式 ::before和::after这两个主要用来给元素的前面或后面插入内容，这两个常用”content”配合使用，见过最多的就是清除浮动 ::selection用来改变浏览网页选中文的默认效果]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变量、作用域和内存问题]]></title>
    <url>%2F2014%2F09%2F20%2F%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[基本类型和引用类型执行环境垃圾收集 按照ECMA-262的定义，Javascript的变量与其他语言的变量有很大区别，其松散类型的本质决定它只是在特定时间用于保存特定值的一个名字而已。 基本类型和引用类型Javascript变量可以用来保存两种类型的值：基本类型值和引用类型值。 基本类型的值源自以下5种基本数据类型：Undefined、Null、Boolean、Number和String。基本类型值和引用类型值具有以下特点： 基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中； 从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本； 引用类型的值是对象，保存在堆内存中； 包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的副本； 从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同一个对象； 确定一个值是哪种基本类型可以使用typeof操作符，而确定一个值是哪种引用类型可以使用instanceof操作符。 12345678910//基本类型var a = 5;var b = a;console.log(a)//5console.log(b)//5//引用类型var obj1 = new Object();var obj2 = obj1;obj2.name = "Feng";console.log(obj1.name); // "Feng" 所有变量（包括基本类型和引用类型）都存在于一个执行环境（也称为作用域）当中，这个执行环境决定了变量的生命周期，以及哪一部分代码可以访问其中的变量。以下关于执行环境的几点总结： 执行环境有全局执行环境（也称全局环境）和函数执行环境之分； 每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链； 函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全局环境； 全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据； 变量的执行环境有助于确定应何时释放内存。 1234567891011121314function f()&#123; var a=1; aa=function()&#123;//全局函数，前面如果加一个var那就是局部函数了 a+=1; &#125; function bb()&#123; alert(a); &#125; return bb;&#125;var f1=f();//得到返回值bbf1();//1aa();f1();//2 此题中，aa函数是全局函数（因为前面没有var），可以直接在全局中被调用，并且它能访问f中的局部变量a，为什么？因为函数运行在定义它的环境中，而非调用它的环境中。对于aa来说，定义它的环境是f，调用它的环境是window。全局函数是说函数在任何作用域都可以被调用，也就是说它在全局任何一个角落都可以被访问，在任何角落都是有效的。但是当你在全局任何一个角落调用全局函数时，全局函数还是会回到定义它的作用域中，从那里开始沿着作用域链向上搜索各级执行环境，直到找到所需标识符为止。]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web前端面试题汇总]]></title>
    <url>%2F2014%2F07%2F13%2FWeb%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[如何理解HTML结构的语义化？所谓标签语义化，就是指标签的含义。语义化的主要目的就是让大家直观的认识标签(markup)和属性(attribute)的用途和作用，对搜索引擎友好，有了良好的结构和语义我们的网页内容便自然容易被搜索引擎抓取，这种符合搜索引擎收索规则的做法，网站的推广便可以省下不少的功夫，而且可维护性更高，因为结构清晰,十分易于阅读。这也是搜索引擎优化SEO重要的一步。 html5有哪些新特性?1、绘画的 canvas 元素2、用于媒介回放的 video 和 audio 元素3、对本地离线存储的更好的支持4、新的特殊内容元素，比如：article、footer、header、nav、section5、新的表单控件，比如：calendar、date、time、email、url、search 移除了那些元素？1、纯表现的元素：basefont，big，center，font, s，strike，tt，u；2、对可用性产生负面影响的元素：frame，frameset，noframes； 如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？IE8/IE7/IE6支持通过document.createElement方法产生的标签， 可以利用这一特性让这些浏览器支持HTML5新标签， 浏览器支持新标签后，还需要添加标签默认的样式：当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架如何区分html和html5：DOCTYPE声明\新增的结构元素\功能元素 清除浮动有几种方式?将多个元素设置为同一行?将多个元素设置为同一行：float，inline-block清除浮动的方式：1、父级div定义 height2、结尾处加空div标签 clear:both3、父级div定义 利用:after和:before来在元素内部插入两个元素块，从面达到清除浮动的效果：1234567891011.clear&#123; zoom:1;&#125;.clear:after&#123; content:””; clear:both; display:block; height:0; overflow:hidden; visibility:hidden;&#125; 4、父级div定义 overflow:hidden5、父级div定义 overflow:auto6、父级div 也一起浮动7、父级div定义 display:table 怪异盒模型box-sizing？弹性盒模型|盒布局? 在标准模式下的盒模型：盒子总宽度/高度=width/height+padding+border+margin在怪异模式下的盒模型下，盒子的总宽度和高度是包含内边距padding和边框border宽度在内的，盒子总宽度/高度=width/height + margin = 内容区宽度/高度 + padding + border + margin;box-sizing有两个值一个是content-box，另一个是border-box。当设置为box-sizing:content-box时，将采用标准模式解析计算；当设置为box-sizing:border-box时，将采用怪异模式解析计算。 a点击出现框，解决方法:1234567a,a:hover,a:active,a:visited,a:link,a:focus&#123; -webkit-tap-highlight-color:rgba(0,0,0,0); -webkit-tap-highlight-color: transparent; outline:none;background: none; text-decoration: none;border:none; -webkit-appearance: none; &#125; 图片和文字在同一行显示?1、在css中给div添加上“vertical-align:middle”属性。2、分别把图片和文字放入不同的div中，然后用“margin”属性进行定位，就可以使他们显示在同一行。3、把图片设置为背景图片。 常见兼容性问题？1、png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.也可以引用一段脚本处理。 2、浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。 3、IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。 4、浮动ie产生的双倍距离（IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。） #box{ float:left; width:10px; margin:0 0 0 100px;} 这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——display:inline;将其转化为行内属性。(这个符号只有ie6会识别) 5、渐进识别的方式，从总体中逐渐排除局部。 首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。 接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。css// .bb{ background-color:#f1ee18; .background-color:#00deff\9; +background-color:#a200ff; _background-color:#1e0bd1; } 6、IE下,可以使用获取常规属性的方法来获取自定义属性, 也可以使用getAttribute()获取自定义属性; Firefox下,只能使用getAttribute()获取自定义属性. 解决方法:统一通过getAttribute()获取自定义属性。 7、IE下,event对象有x,y属性,但是没有pageX,pageY属性; Firefox下,event对象有pageX,pageY属性,但是没有x,y属性. * 解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。 8、Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。 9、超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序: L-V-H-A : a:link {} a:visited {} a:hover {} a:active {} 10、上下margin重合问题ie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。解决方法，养成良好的代码编写习惯，同时采用margin-top或者同时采用margin-bottom。 11、ie6对png图片格式支持不好(引用一段脚本处理) 怎样去掉选中时的虚线框？利用onfocus=”this.blur();”例如： 1&lt;a href="#" onfocus="this.blur();"&gt;测试&lt;/a&gt; 设置图片元素上下垂直居中1、diaplay:table-cell（IE6\7不兼容）2、position加margin（IE6不支持）12345678910.wrap .center &#123; width: 100px; height: 100px; margin: auto; position: absolute; left: 0; right: 0; top: 0; bottom: 0;&#125; 3、position加transform （ie9以下不支持 transform，手机端表现的比较好）123456.wrap .center &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; 4、flex;align-items: center;justify-content: center（移动端首选）12345.wrap &#123; display: flex; align-items: center; justify-content: center;&#125; 5、display:flex;margin:auto（移动端首选）123456.wrap &#123; display: flex;&#125;.wrap .center &#123; margin: auto;&#125; 6、纯position（适用于所有浏览器）12345678910111213141516171819/* 方法一：*/.wrap .center &#123; position: absolute; width: 100px; height: 100px; left: 50px;/*left=(父元素的宽 - 子元素的宽 ) / 2 */ top: 50px;/*top=(父元素的高 - 子元素的高 ) / 2 */&#125;/* 方法二：*/.wrap .center &#123; background: green; position: absolute; width: 100px; height: 100px; left: 50%;/*left值固定为50% */ top: 50%;/*top固定为50% */ margin-left:-50px;/*-（子元素的宽/2） */ margin-top:-50px;/*-（子元素的高/2） */&#125; px/em/rem有什么区别？ 为什么通常给font-size 设置的字体为62.5%?相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。1、em的值并不是固定的；2、em会继承父级元素的字体大小。使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。rem是相对于浏览器进行缩放的。1rem默认是16px，在响应式布局中，一个个除来转换成rem，太麻烦，所以重置rembody{font-size=62.5% } 此时1rem = 10px;若是12px则是1.2rem。 CSS3有哪些新特性？1、边框：border-radius、box-shadow、border-image2、背景：background-size、background-origin3、文本效果：text-shadow、word-wrap4、字体：@font-face规则5、2D转换：translate()、rotate()、scale()、skew()、matrix()6、3D转换：rotateX()、rotateY()7、过渡：transition：transition-property transition-duration transition-timing-function transition-delay8、动画：@keyframes规则@keyframes myfirst {from{}to{}}//定义动画div{animation: myfirst 5s linear 2s infinite alternate;} animation对应的属性 写法：animation: name duration timing-function delay iteration-count direction; 下面是对应的属性的介绍animation-name 规定需要绑定到选择器的 keyframe 名称。animation-duration 规定完成动画所花费的时间，以秒或毫秒计。animation-timing-function 规定动画的速度曲线。animation-delay 规定在动画开始之前的延迟。animation-iteration-count 规定动画应该播放的次数。animation-direction 规定是否应该轮流反向播放动画。 伪类选择器和伪元素？CSS3中引入的伪类选择器有？CSS3中伪元素有?伪类用一个冒号来表示，而伪元素则用两个冒号来表示。伪类选择器：由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。伪元素选择器：并不是针对真正的元素使用的选择器，而是针对CSS中已经定义好的伪元素使用的选择器；CSS3中引入的伪类选择器：:root()选择器，根选择器，匹配元素E所在文档的根元素。在HTML文档中，根元素始终是。:root选择器等同于元素。 :not()选择器称为否定选择器，和jQuery中的:not选择器一模一样，可以选择除某个元素之外的所有元素。 :empty()选择器表示的就是空。用来选择没有任何内容的元素，这里没有内容指的是一点内容都没有，哪怕是一个空格。 :target()选择器来对页面某个target元素(该元素的id被当做页面中的超链接来使用)指定样式，该样式只在用户点击了页面中的超链接，并且跳转到target元素后起作用。 :first-child()选择器表示的是选择父元素的第一个子元素的元素E。简单点理解就是选择元素中的第一个子元素，记住是子元素，而不是后代元素。 :nth-child()选择某个元素的一个或多个特定的子元素。 :nth-last-child()从某父元素的最后一个子元素开始计算，来选择特定的元素 :nth-of-type(n)选择器和:nth-child(n)选择器非常类似，不同的是它只计算父元素中指定的某种类型的子元素。 :only-child表示的是一个元素是它的父元素的唯一一个子元素。 :first-line为某个元素的第一行文字使用样式。 :first-letter 为某个元素中的文字的首字母或第一个字使用样式。 :before 在某个元素之前插入一些内容。 :after 在某个元素之后插入一些内容。 CSS3中伪元素： ::first-line选择元素的第一行，比如说改变每个段落的第一行文本的样式 ::before和::after这两个主要用来给元素的前面或后面插入内容，这两个常用”content”配合使用，见过最多的就是清除浮动 ::selection用来改变浏览网页选中文的默认效果 简述前端优化的方式1、尽量减少HTTP请求次数2、减少DNS查找次数3、避免跳转4、可缓存的AJAX5、推迟加载内容6、预加载7、减少DOM元素数量8、根据域名划分页面内容9、使iframe的数量最小10、不要出现404错误11、使用内容分发网络12、为文件头指定Expires或Cache-Control13、Gzip压缩文件内容14、配置ETag15、尽早刷新输出缓冲16、使用GET来完成AJAX请求17、把样式表置于顶部18、避免使用CSS表达式（Expression）19、使用外部JavaScript和CSS20、削减JavaScript和CSS21、用代替@import22、避免使用滤镜23、把脚本置于页面底部24、剔除重复脚本 你如何对网站的文件和资源进行优化？ 文件合并文件最小化/文件压缩使用CDN托管缓存的使用 为什么利用多个域名来提供网站资源会更有效？1、CDN缓存更方便2、突破浏览器并发限制（一般每个域名建立的链接不超过6个）3、Cookieless，节省带宽，尤其是上行带宽一般比下行要慢4、对于UGC的内容和主站隔离，防止不必要的安全问题(上传js窃取主站cookie之类的)。正是这个原因要求用户内容的域名必须不是自己主站的子域名，而是一个完全独立的第三方域名。5、数据做了划分，甚至切到了不同的物理集群，通过子域名来分流比较省事。这个可能被用的不多。PS:关于Cookie的问题，带宽是次要的，安全隔离才是主要的。关于多域名，也不是越多越好，虽然服务器端可以做泛解释，浏览器做dns解释也是耗时间的，而且太多域名，如果要走https的话，还有要多买证书和部署的问题。 请说出三种减少页面加载时间的方法1、优化图片2、图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）3、优化CSS（压缩合并css，如margin-top,margin-left…)4、网址后加斜杠（如www.campr.com/目录，会判断这个“目录是什么文件类型，或者是目录。）5、标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。）6、减少http请求（合并文件，合并图片）。 解释下JavaScript中this是如何工作的this永远指向函数运行时所在的对象，而不是函数被创建时所在的对象。匿名函数或不处于任何对象中的函数指向window 。 1、如果是call，apply,with，指定的this是谁，就是谁。2、普通的函数调用，函数被谁调用，this就是谁。 解释下原型继承的原理以下代码展示了JS引擎如何查找属性： 123456789function getProperty(obj,prop) &#123; if (obj.hasOwnProperty(prop)) &#123; return obj[prop]; &#125; else if (obj.__proto__!==null) &#123; return getProperty(obj.__proto__,prop); &#125; else &#123; return undefined; &#125;&#125; 事件绑定与冒泡机制Ajax XMLHttpRequest对象 Jsonp一道js基础综合题 此题涉及的知识点众多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。 1234567891011121314151617function Foo() &#123; getName = function () &#123; alert (1); &#125;; return this;&#125;Foo.getName = function () &#123; alert (2);&#125;;Foo.prototype.getName = function () &#123; alert (3);&#125;;var getName = function () &#123; alert (4);&#125;;function getName() &#123; alert (5);&#125;//请写出以下输出结果：Foo.getName();//2getName();//4Foo().getName();//1getName();//1new Foo.getName();//2new Foo().getName();//3new new Foo().getName();//3 http://www.cnblogs.com/xxcanghai/p/5189353.html TCP三次握手和四次挥手三次握手： 第一次握手：建立连接时，客户端A发生SYN包（SYN=j）到服务器B,并进入SYN_SEND状态，等待服务器B确认；第二次握手：服务器B收到SYN包，必须确认客户A的SYN，ACK=j+1,同时自己也发送一个SYN包，SYN=k 即，SYN+ACK包，此时服务器进入SYN_RECV状态；第三次握手：客户端A收到服务器B的SYN+ACK包,向服务器B发送确认包ACK(ACK=k+1),此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。 四次挥手： 客户端A发送一个FIN.用来关闭客户A到服务器B的数据传送(报文段4)；服务器B收到这个FIN. 它发回一个ACK，确认序号为收到的序号+1（报文段5）。和SYN一样，一个FIN将占用一个序号；服务器B关闭与客户端A的连接，发送一个FIN给客户端A（报文段6）；客户端A发回ACK报文确认，并将确认序号设置为序号加1（报文段7）。 输入URL到展现页面的全过程1、域名解析2、建立TCP连接3、发起HTTP请求4、服务器响应HTTP请求5、浏览器渲染页面 Http协议]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
